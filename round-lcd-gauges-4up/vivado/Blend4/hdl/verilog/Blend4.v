// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Blend4_Blend4,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=744001,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=6102,HLS_SYN_LUT=10693,HLS_VERSION=2020_2}" *)

module Blend4 (
        ap_clk,
        ap_rst_n,
        m_axi_background_AWVALID,
        m_axi_background_AWREADY,
        m_axi_background_AWADDR,
        m_axi_background_AWID,
        m_axi_background_AWLEN,
        m_axi_background_AWSIZE,
        m_axi_background_AWBURST,
        m_axi_background_AWLOCK,
        m_axi_background_AWCACHE,
        m_axi_background_AWPROT,
        m_axi_background_AWQOS,
        m_axi_background_AWREGION,
        m_axi_background_AWUSER,
        m_axi_background_WVALID,
        m_axi_background_WREADY,
        m_axi_background_WDATA,
        m_axi_background_WSTRB,
        m_axi_background_WLAST,
        m_axi_background_WID,
        m_axi_background_WUSER,
        m_axi_background_ARVALID,
        m_axi_background_ARREADY,
        m_axi_background_ARADDR,
        m_axi_background_ARID,
        m_axi_background_ARLEN,
        m_axi_background_ARSIZE,
        m_axi_background_ARBURST,
        m_axi_background_ARLOCK,
        m_axi_background_ARCACHE,
        m_axi_background_ARPROT,
        m_axi_background_ARQOS,
        m_axi_background_ARREGION,
        m_axi_background_ARUSER,
        m_axi_background_RVALID,
        m_axi_background_RREADY,
        m_axi_background_RDATA,
        m_axi_background_RLAST,
        m_axi_background_RID,
        m_axi_background_RUSER,
        m_axi_background_RRESP,
        m_axi_background_BVALID,
        m_axi_background_BREADY,
        m_axi_background_BRESP,
        m_axi_background_BID,
        m_axi_background_BUSER,
        m_axi_foreground_AWVALID,
        m_axi_foreground_AWREADY,
        m_axi_foreground_AWADDR,
        m_axi_foreground_AWID,
        m_axi_foreground_AWLEN,
        m_axi_foreground_AWSIZE,
        m_axi_foreground_AWBURST,
        m_axi_foreground_AWLOCK,
        m_axi_foreground_AWCACHE,
        m_axi_foreground_AWPROT,
        m_axi_foreground_AWQOS,
        m_axi_foreground_AWREGION,
        m_axi_foreground_AWUSER,
        m_axi_foreground_WVALID,
        m_axi_foreground_WREADY,
        m_axi_foreground_WDATA,
        m_axi_foreground_WSTRB,
        m_axi_foreground_WLAST,
        m_axi_foreground_WID,
        m_axi_foreground_WUSER,
        m_axi_foreground_ARVALID,
        m_axi_foreground_ARREADY,
        m_axi_foreground_ARADDR,
        m_axi_foreground_ARID,
        m_axi_foreground_ARLEN,
        m_axi_foreground_ARSIZE,
        m_axi_foreground_ARBURST,
        m_axi_foreground_ARLOCK,
        m_axi_foreground_ARCACHE,
        m_axi_foreground_ARPROT,
        m_axi_foreground_ARQOS,
        m_axi_foreground_ARREGION,
        m_axi_foreground_ARUSER,
        m_axi_foreground_RVALID,
        m_axi_foreground_RREADY,
        m_axi_foreground_RDATA,
        m_axi_foreground_RLAST,
        m_axi_foreground_RID,
        m_axi_foreground_RUSER,
        m_axi_foreground_RRESP,
        m_axi_foreground_BVALID,
        m_axi_foreground_BREADY,
        m_axi_foreground_BRESP,
        m_axi_foreground_BID,
        m_axi_foreground_BUSER,
        pixels0_V_TDATA,
        pixels0_V_TVALID,
        pixels0_V_TREADY,
        pixels1_V_TDATA,
        pixels1_V_TVALID,
        pixels1_V_TREADY,
        pixels2_V_TDATA,
        pixels2_V_TVALID,
        pixels2_V_TREADY,
        pixels3_V_TDATA,
        pixels3_V_TVALID,
        pixels3_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 25'd4096;
parameter    ap_ST_fsm_state16 = 25'd8192;
parameter    ap_ST_fsm_state17 = 25'd16384;
parameter    ap_ST_fsm_state18 = 25'd32768;
parameter    ap_ST_fsm_state19 = 25'd65536;
parameter    ap_ST_fsm_state20 = 25'd131072;
parameter    ap_ST_fsm_state21 = 25'd262144;
parameter    ap_ST_fsm_state22 = 25'd524288;
parameter    ap_ST_fsm_state23 = 25'd1048576;
parameter    ap_ST_fsm_pp1_stage0 = 25'd2097152;
parameter    ap_ST_fsm_state27 = 25'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 25'd8388608;
parameter    ap_ST_fsm_state59 = 25'd16777216;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BACKGROUND_ID_WIDTH = 1;
parameter    C_M_AXI_BACKGROUND_ADDR_WIDTH = 64;
parameter    C_M_AXI_BACKGROUND_DATA_WIDTH = 32;
parameter    C_M_AXI_BACKGROUND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BACKGROUND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BACKGROUND_WUSER_WIDTH = 1;
parameter    C_M_AXI_BACKGROUND_RUSER_WIDTH = 1;
parameter    C_M_AXI_BACKGROUND_BUSER_WIDTH = 1;
parameter    C_M_AXI_BACKGROUND_USER_VALUE = 0;
parameter    C_M_AXI_BACKGROUND_PROT_VALUE = 0;
parameter    C_M_AXI_BACKGROUND_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_FOREGROUND_ID_WIDTH = 1;
parameter    C_M_AXI_FOREGROUND_ADDR_WIDTH = 64;
parameter    C_M_AXI_FOREGROUND_DATA_WIDTH = 32;
parameter    C_M_AXI_FOREGROUND_AWUSER_WIDTH = 1;
parameter    C_M_AXI_FOREGROUND_ARUSER_WIDTH = 1;
parameter    C_M_AXI_FOREGROUND_WUSER_WIDTH = 1;
parameter    C_M_AXI_FOREGROUND_RUSER_WIDTH = 1;
parameter    C_M_AXI_FOREGROUND_BUSER_WIDTH = 1;
parameter    C_M_AXI_FOREGROUND_USER_VALUE = 0;
parameter    C_M_AXI_FOREGROUND_PROT_VALUE = 0;
parameter    C_M_AXI_FOREGROUND_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BACKGROUND_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_FOREGROUND_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_background_AWVALID;
input   m_axi_background_AWREADY;
output  [C_M_AXI_BACKGROUND_ADDR_WIDTH - 1:0] m_axi_background_AWADDR;
output  [C_M_AXI_BACKGROUND_ID_WIDTH - 1:0] m_axi_background_AWID;
output  [7:0] m_axi_background_AWLEN;
output  [2:0] m_axi_background_AWSIZE;
output  [1:0] m_axi_background_AWBURST;
output  [1:0] m_axi_background_AWLOCK;
output  [3:0] m_axi_background_AWCACHE;
output  [2:0] m_axi_background_AWPROT;
output  [3:0] m_axi_background_AWQOS;
output  [3:0] m_axi_background_AWREGION;
output  [C_M_AXI_BACKGROUND_AWUSER_WIDTH - 1:0] m_axi_background_AWUSER;
output   m_axi_background_WVALID;
input   m_axi_background_WREADY;
output  [C_M_AXI_BACKGROUND_DATA_WIDTH - 1:0] m_axi_background_WDATA;
output  [C_M_AXI_BACKGROUND_WSTRB_WIDTH - 1:0] m_axi_background_WSTRB;
output   m_axi_background_WLAST;
output  [C_M_AXI_BACKGROUND_ID_WIDTH - 1:0] m_axi_background_WID;
output  [C_M_AXI_BACKGROUND_WUSER_WIDTH - 1:0] m_axi_background_WUSER;
output   m_axi_background_ARVALID;
input   m_axi_background_ARREADY;
output  [C_M_AXI_BACKGROUND_ADDR_WIDTH - 1:0] m_axi_background_ARADDR;
output  [C_M_AXI_BACKGROUND_ID_WIDTH - 1:0] m_axi_background_ARID;
output  [7:0] m_axi_background_ARLEN;
output  [2:0] m_axi_background_ARSIZE;
output  [1:0] m_axi_background_ARBURST;
output  [1:0] m_axi_background_ARLOCK;
output  [3:0] m_axi_background_ARCACHE;
output  [2:0] m_axi_background_ARPROT;
output  [3:0] m_axi_background_ARQOS;
output  [3:0] m_axi_background_ARREGION;
output  [C_M_AXI_BACKGROUND_ARUSER_WIDTH - 1:0] m_axi_background_ARUSER;
input   m_axi_background_RVALID;
output   m_axi_background_RREADY;
input  [C_M_AXI_BACKGROUND_DATA_WIDTH - 1:0] m_axi_background_RDATA;
input   m_axi_background_RLAST;
input  [C_M_AXI_BACKGROUND_ID_WIDTH - 1:0] m_axi_background_RID;
input  [C_M_AXI_BACKGROUND_RUSER_WIDTH - 1:0] m_axi_background_RUSER;
input  [1:0] m_axi_background_RRESP;
input   m_axi_background_BVALID;
output   m_axi_background_BREADY;
input  [1:0] m_axi_background_BRESP;
input  [C_M_AXI_BACKGROUND_ID_WIDTH - 1:0] m_axi_background_BID;
input  [C_M_AXI_BACKGROUND_BUSER_WIDTH - 1:0] m_axi_background_BUSER;
output   m_axi_foreground_AWVALID;
input   m_axi_foreground_AWREADY;
output  [C_M_AXI_FOREGROUND_ADDR_WIDTH - 1:0] m_axi_foreground_AWADDR;
output  [C_M_AXI_FOREGROUND_ID_WIDTH - 1:0] m_axi_foreground_AWID;
output  [7:0] m_axi_foreground_AWLEN;
output  [2:0] m_axi_foreground_AWSIZE;
output  [1:0] m_axi_foreground_AWBURST;
output  [1:0] m_axi_foreground_AWLOCK;
output  [3:0] m_axi_foreground_AWCACHE;
output  [2:0] m_axi_foreground_AWPROT;
output  [3:0] m_axi_foreground_AWQOS;
output  [3:0] m_axi_foreground_AWREGION;
output  [C_M_AXI_FOREGROUND_AWUSER_WIDTH - 1:0] m_axi_foreground_AWUSER;
output   m_axi_foreground_WVALID;
input   m_axi_foreground_WREADY;
output  [C_M_AXI_FOREGROUND_DATA_WIDTH - 1:0] m_axi_foreground_WDATA;
output  [C_M_AXI_FOREGROUND_WSTRB_WIDTH - 1:0] m_axi_foreground_WSTRB;
output   m_axi_foreground_WLAST;
output  [C_M_AXI_FOREGROUND_ID_WIDTH - 1:0] m_axi_foreground_WID;
output  [C_M_AXI_FOREGROUND_WUSER_WIDTH - 1:0] m_axi_foreground_WUSER;
output   m_axi_foreground_ARVALID;
input   m_axi_foreground_ARREADY;
output  [C_M_AXI_FOREGROUND_ADDR_WIDTH - 1:0] m_axi_foreground_ARADDR;
output  [C_M_AXI_FOREGROUND_ID_WIDTH - 1:0] m_axi_foreground_ARID;
output  [7:0] m_axi_foreground_ARLEN;
output  [2:0] m_axi_foreground_ARSIZE;
output  [1:0] m_axi_foreground_ARBURST;
output  [1:0] m_axi_foreground_ARLOCK;
output  [3:0] m_axi_foreground_ARCACHE;
output  [2:0] m_axi_foreground_ARPROT;
output  [3:0] m_axi_foreground_ARQOS;
output  [3:0] m_axi_foreground_ARREGION;
output  [C_M_AXI_FOREGROUND_ARUSER_WIDTH - 1:0] m_axi_foreground_ARUSER;
input   m_axi_foreground_RVALID;
output   m_axi_foreground_RREADY;
input  [C_M_AXI_FOREGROUND_DATA_WIDTH - 1:0] m_axi_foreground_RDATA;
input   m_axi_foreground_RLAST;
input  [C_M_AXI_FOREGROUND_ID_WIDTH - 1:0] m_axi_foreground_RID;
input  [C_M_AXI_FOREGROUND_RUSER_WIDTH - 1:0] m_axi_foreground_RUSER;
input  [1:0] m_axi_foreground_RRESP;
input   m_axi_foreground_BVALID;
output   m_axi_foreground_BREADY;
input  [1:0] m_axi_foreground_BRESP;
input  [C_M_AXI_FOREGROUND_ID_WIDTH - 1:0] m_axi_foreground_BID;
input  [C_M_AXI_FOREGROUND_BUSER_WIDTH - 1:0] m_axi_foreground_BUSER;
output  [15:0] pixels0_V_TDATA;
output   pixels0_V_TVALID;
input   pixels0_V_TREADY;
output  [15:0] pixels1_V_TDATA;
output   pixels1_V_TVALID;
input   pixels1_V_TREADY;
output  [15:0] pixels2_V_TDATA;
output   pixels2_V_TVALID;
input   pixels2_V_TREADY;
output  [15:0] pixels3_V_TDATA;
output   pixels3_V_TVALID;
input   pixels3_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] background_offset;
wire   [63:0] foreground_offset;
reg    background_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond13_reg_1636;
reg    background_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    foreground_blk_n_AR;
wire    ap_CS_fsm_state17;
reg    foreground_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond31914_reg_1656;
reg    pixels0_V_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter29;
wire    ap_block_pp2_stage0;
reg   [1:0] empty_60_reg_1665;
reg    ap_enable_reg_pp2_iter30;
reg    pixels1_V_TDATA_blk_n;
reg    pixels2_V_TDATA_blk_n;
reg    pixels3_V_TDATA_blk_n;
wire    background_AWREADY;
wire    background_WREADY;
reg    background_ARVALID;
wire    background_ARREADY;
wire    background_RVALID;
reg    background_RREADY;
wire   [31:0] background_RDATA;
wire    background_RLAST;
wire   [0:0] background_RID;
wire   [0:0] background_RUSER;
wire   [1:0] background_RRESP;
wire    background_BVALID;
wire   [1:0] background_BRESP;
wire   [0:0] background_BID;
wire   [0:0] background_BUSER;
wire    foreground_AWREADY;
wire    foreground_WREADY;
reg    foreground_ARVALID;
wire    foreground_ARREADY;
wire    foreground_RVALID;
reg    foreground_RREADY;
wire   [31:0] foreground_RDATA;
wire    foreground_RLAST;
wire   [0:0] foreground_RID;
wire   [0:0] foreground_RUSER;
wire   [1:0] foreground_RRESP;
wire    foreground_BVALID;
wire   [1:0] foreground_BRESP;
wire   [0:0] foreground_BID;
wire   [0:0] foreground_BUSER;
reg   [7:0] loop_index318_reg_331;
reg   [7:0] loop_index318_reg_331_pp0_iter1_reg;
wire    ap_block_state13_pp0_stage0_iter0;
reg    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] loop_index_reg_343;
reg   [7:0] loop_index_reg_343_pp1_iter1_reg;
wire    ap_block_state24_pp1_stage0_iter0;
reg    ap_block_state25_pp1_stage0_iter1;
wire    ap_block_state26_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [7:0] col_reg_355;
reg   [63:0] foreground_offset_read_reg_1576;
reg   [63:0] background_offset_read_reg_1581;
wire   [9:0] add_ln32_fu_449_p2;
reg   [9:0] add_ln32_reg_1586;
wire    ap_CS_fsm_state2;
wire    regslice_both_pixels0_V_U_apdone_blk;
wire    regslice_both_pixels1_V_U_apdone_blk;
wire    regslice_both_pixels2_V_U_apdone_blk;
wire    regslice_both_pixels3_V_U_apdone_blk;
reg    ap_block_state2;
wire   [2:0] select_ln32_fu_497_p3;
reg   [2:0] select_ln32_reg_1594;
wire   [0:0] icmp_ln32_fu_485_p2;
wire   [16:0] select_ln32_1_fu_541_p3;
reg  signed [16:0] select_ln32_1_reg_1600;
wire   [7:0] select_ln32_2_fu_549_p3;
reg   [7:0] select_ln32_2_reg_1605;
wire    ap_CS_fsm_state4;
wire  signed [63:0] sext_ln34_1_fu_571_p1;
reg  signed [63:0] sext_ln34_1_reg_1620;
wire    ap_CS_fsm_state5;
reg   [63:0] background_addr_reg_1625;
wire   [7:0] empty_55_fu_600_p2;
reg   [7:0] empty_55_reg_1631;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond13_fu_606_p2;
reg   [0:0] exitcond13_reg_1636_pp0_iter1_reg;
reg   [31:0] background_addr_read_reg_1640;
reg   [63:0] foreground_addr_reg_1645;
wire    ap_CS_fsm_state16;
wire   [7:0] empty_58_fu_641_p2;
reg   [7:0] empty_58_reg_1651;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond31914_fu_647_p2;
reg   [0:0] exitcond31914_reg_1656_pp1_iter1_reg;
reg   [31:0] foreground_addr_read_reg_1660;
wire   [1:0] empty_60_fu_658_p1;
wire    ap_CS_fsm_state27;
wire   [7:0] add_ln36_fu_661_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state28_pp2_stage0_iter0;
wire    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
wire    ap_block_state31_pp2_stage0_iter3;
wire    ap_block_state32_pp2_stage0_iter4;
wire    ap_block_state33_pp2_stage0_iter5;
wire    ap_block_state34_pp2_stage0_iter6;
wire    ap_block_state35_pp2_stage0_iter7;
wire    ap_block_state36_pp2_stage0_iter8;
wire    ap_block_state37_pp2_stage0_iter9;
wire    ap_block_state38_pp2_stage0_iter10;
wire    ap_block_state39_pp2_stage0_iter11;
wire    ap_block_state40_pp2_stage0_iter12;
wire    ap_block_state41_pp2_stage0_iter13;
wire    ap_block_state42_pp2_stage0_iter14;
wire    ap_block_state43_pp2_stage0_iter15;
wire    ap_block_state44_pp2_stage0_iter16;
wire    ap_block_state45_pp2_stage0_iter17;
wire    ap_block_state46_pp2_stage0_iter18;
wire    ap_block_state47_pp2_stage0_iter19;
wire    ap_block_state48_pp2_stage0_iter20;
wire    ap_block_state49_pp2_stage0_iter21;
wire    ap_block_state50_pp2_stage0_iter22;
wire    ap_block_state51_pp2_stage0_iter23;
wire    ap_block_state52_pp2_stage0_iter24;
wire    ap_block_state53_pp2_stage0_iter25;
wire    ap_block_state54_pp2_stage0_iter26;
wire    ap_block_state55_pp2_stage0_iter27;
wire    ap_block_state56_pp2_stage0_iter28;
reg    ap_block_state57_pp2_stage0_iter29;
reg    ap_block_state57_io;
reg    ap_block_state58_pp2_stage0_iter30;
reg    ap_block_state58_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln36_fu_667_p2;
wire   [63:0] col_cast_fu_673_p1;
reg   [63:0] col_cast_reg_1678;
reg   [63:0] col_cast_reg_1678_pp2_iter1_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter2_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter3_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter4_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter5_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter6_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter7_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter8_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter9_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter10_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter11_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter12_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter13_reg;
reg   [63:0] col_cast_reg_1678_pp2_iter14_reg;
reg   [7:0] fgr_V_reg_1688;
reg   [7:0] fgr_V_reg_1688_pp2_iter2_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter3_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter4_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter5_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter6_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter7_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter8_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter9_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter10_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter11_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter12_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter13_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter14_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter15_reg;
reg   [7:0] fgr_V_reg_1688_pp2_iter16_reg;
reg   [7:0] fgg_V_reg_1693;
reg   [7:0] fgg_V_reg_1693_pp2_iter2_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter3_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter4_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter5_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter6_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter7_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter8_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter9_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter10_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter11_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter12_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter13_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter14_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter15_reg;
reg   [7:0] fgg_V_reg_1693_pp2_iter16_reg;
reg   [7:0] fgb_V_reg_1698;
reg   [7:0] fgb_V_reg_1698_pp2_iter2_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter3_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter4_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter5_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter6_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter7_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter8_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter9_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter10_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter11_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter12_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter13_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter14_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter15_reg;
reg   [7:0] fgb_V_reg_1698_pp2_iter16_reg;
wire   [31:0] grp_fu_383_p1;
reg   [31:0] conv_reg_1708;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] alpha_reg_1713;
reg   [31:0] alpha_reg_1713_pp2_iter14_reg;
reg   [31:0] alpha_reg_1713_pp2_iter15_reg;
reg   [31:0] alpha_reg_1713_pp2_iter16_reg;
reg   [31:0] alpha_reg_1713_pp2_iter17_reg;
reg   [31:0] alpha_reg_1713_pp2_iter18_reg;
reg   [31:0] alpha_reg_1713_pp2_iter19_reg;
reg   [31:0] alpha_reg_1713_pp2_iter20_reg;
wire   [63:0] grp_fu_395_p1;
wire   [63:0] grp_fu_407_p2;
reg   [63:0] i_op_assign_reg_1761;
wire   [63:0] grp_fu_440_p1;
reg   [63:0] conv_i_reg_1768;
wire   [63:0] grp_fu_443_p1;
reg   [63:0] conv_i2_reg_1773;
wire   [63:0] grp_fu_446_p1;
reg   [63:0] conv_i4_reg_1778;
wire   [31:0] grp_fu_386_p1;
reg   [31:0] conv_i1_reg_1783;
wire   [31:0] grp_fu_389_p1;
reg   [31:0] conv_i3_reg_1788;
wire   [31:0] grp_fu_392_p1;
reg   [31:0] conv_i5_reg_1793;
wire   [31:0] grp_fu_366_p2;
reg   [31:0] mul_i2_reg_1798;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] mul_i4_reg_1803;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] mul_i_reg_1808;
wire   [63:0] grp_fu_428_p2;
reg   [63:0] mul_i1_reg_1813;
wire   [63:0] grp_fu_432_p2;
reg   [63:0] mul_i3_reg_1818;
wire   [63:0] grp_fu_436_p2;
reg   [63:0] mul_i5_reg_1823;
wire   [63:0] grp_fu_398_p1;
wire   [63:0] grp_fu_401_p1;
wire   [63:0] grp_fu_404_p1;
wire   [63:0] reg_fu_774_p1;
reg   [63:0] reg_reg_1843;
reg   [0:0] p_Result_s_reg_1848;
wire   [7:0] trunc_ln328_fu_804_p1;
reg   [7:0] trunc_ln328_reg_1853;
wire   [0:0] icmp_ln323_fu_808_p2;
reg   [0:0] icmp_ln323_reg_1859;
wire  signed [11:0] sh_amt_fu_814_p2;
reg  signed [11:0] sh_amt_reg_1866;
wire   [0:0] icmp_ln327_fu_820_p2;
reg   [0:0] icmp_ln327_reg_1873;
wire   [0:0] icmp_ln329_fu_826_p2;
reg   [0:0] icmp_ln329_reg_1879;
wire   [63:0] reg_1_fu_832_p1;
reg   [63:0] reg_1_reg_1885;
reg   [0:0] p_Result_2_reg_1890;
wire   [7:0] trunc_ln328_1_fu_862_p1;
reg   [7:0] trunc_ln328_1_reg_1895;
wire   [0:0] icmp_ln323_1_fu_866_p2;
reg   [0:0] icmp_ln323_1_reg_1901;
wire  signed [11:0] sh_amt_2_fu_872_p2;
reg  signed [11:0] sh_amt_2_reg_1908;
wire   [0:0] icmp_ln327_1_fu_878_p2;
reg   [0:0] icmp_ln327_1_reg_1915;
wire   [0:0] icmp_ln329_1_fu_884_p2;
reg   [0:0] icmp_ln329_1_reg_1921;
wire   [63:0] reg_2_fu_890_p1;
reg   [63:0] reg_2_reg_1927;
reg   [0:0] p_Result_4_reg_1932;
wire   [7:0] trunc_ln328_2_fu_920_p1;
reg   [7:0] trunc_ln328_2_reg_1937;
wire   [0:0] icmp_ln323_2_fu_924_p2;
reg   [0:0] icmp_ln323_2_reg_1943;
wire  signed [11:0] sh_amt_4_fu_930_p2;
reg  signed [11:0] sh_amt_4_reg_1950;
wire   [0:0] icmp_ln327_2_fu_936_p2;
reg   [0:0] icmp_ln327_2_reg_1957;
wire   [0:0] icmp_ln329_2_fu_942_p2;
reg   [0:0] icmp_ln329_2_reg_1963;
wire   [15:0] pixel_V_fu_1548_p4;
wire   [2:0] add_ln33_fu_1562_p2;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state12;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state23;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state24;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
reg    ap_enable_reg_pp2_iter27;
reg    ap_enable_reg_pp2_iter28;
reg   [7:0] fgLineBuff_address0;
reg    fgLineBuff_ce0;
reg    fgLineBuff_we0;
wire   [31:0] fgLineBuff_q0;
reg   [7:0] bgLineBuff_address0;
reg    bgLineBuff_ce0;
reg    bgLineBuff_we0;
wire   [31:0] bgLineBuff_q0;
reg   [9:0] indvar_flatten_reg_298;
reg   [7:0] row_reg_309;
reg   [2:0] lcd_reg_320;
reg   [7:0] ap_phi_mux_loop_index318_phi_fu_335_p4;
reg   [7:0] ap_phi_mux_loop_index_phi_fu_347_p4;
wire   [63:0] loop_index318_cast_fu_612_p1;
wire   [63:0] loop_index_cast_fu_653_p1;
wire  signed [63:0] sext_ln34_fu_590_p1;
wire  signed [63:0] sext_ln35_fu_631_p1;
reg    ap_block_pp2_stage0_01001;
wire   [31:0] grp_fu_383_p0;
wire   [31:0] grp_fu_386_p0;
wire   [31:0] grp_fu_389_p0;
wire   [31:0] grp_fu_392_p0;
wire   [31:0] grp_fu_440_p0;
wire   [31:0] grp_fu_443_p0;
wire   [31:0] grp_fu_446_p0;
wire   [15:0] p_shl_fu_455_p3;
wire   [11:0] p_shl1_fu_467_p3;
wire   [16:0] p_shl_cast_fu_463_p1;
wire   [16:0] p_shl1_cast_fu_475_p1;
wire   [0:0] icmp_ln33_fu_491_p2;
wire   [7:0] add_ln32_1_fu_505_p2;
wire   [15:0] p_shl_mid1_fu_511_p3;
wire   [11:0] p_shl1_mid1_fu_523_p3;
wire   [16:0] p_shl_cast_mid1_fu_519_p1;
wire   [16:0] p_shl1_cast_mid1_fu_531_p1;
wire   [16:0] p_mid1_fu_535_p2;
wire   [16:0] empty_fu_479_p2;
wire  signed [18:0] grp_fu_1567_p3;
wire   [20:0] tmp_6_fu_564_p3;
wire   [63:0] add_ln34_1_fu_575_p2;
wire   [61:0] trunc_ln1_fu_580_p4;
wire   [63:0] add_ln34_2_fu_617_p2;
wire   [61:0] trunc_ln2_fu_621_p4;
wire   [7:0] fga_V_fu_708_p1;
wire   [7:0] bgr_V_fu_717_p4;
wire   [7:0] bgg_V_fu_727_p4;
wire   [7:0] bgb_V_fu_737_p4;
wire   [63:0] grp_fu_413_p2;
wire   [10:0] exp_fu_790_p4;
wire   [62:0] trunc_ln306_fu_778_p1;
wire   [11:0] zext_ln311_fu_800_p1;
wire   [63:0] grp_fu_418_p2;
wire   [10:0] exp_1_fu_848_p4;
wire   [62:0] trunc_ln306_1_fu_836_p1;
wire   [11:0] zext_ln311_1_fu_858_p1;
wire   [63:0] grp_fu_423_p2;
wire   [10:0] exp_2_fu_906_p4;
wire   [62:0] trunc_ln306_2_fu_894_p1;
wire   [11:0] zext_ln311_2_fu_916_p1;
wire   [51:0] trunc_ln315_fu_948_p1;
wire   [52:0] p_Result_1_fu_951_p3;
wire  signed [11:0] sh_amt_1_fu_968_p2;
wire   [8:0] tmp_8_fu_977_p4;
wire  signed [31:0] sext_ln331_fu_993_p1;
wire   [53:0] zext_ln320_fu_959_p1;
wire   [53:0] zext_ln331_fu_996_p1;
wire   [53:0] lshr_ln331_fu_1000_p2;
wire  signed [31:0] sext_ln326_fu_973_p1;
wire   [7:0] sext_ln326cast_fu_1010_p1;
wire   [0:0] or_ln327_fu_1019_p2;
wire   [0:0] xor_ln327_fu_1023_p2;
wire   [0:0] and_ln329_fu_1029_p2;
wire   [0:0] icmp_ln330_fu_963_p2;
wire   [0:0] and_ln330_fu_1034_p2;
wire   [7:0] trunc_ln331_fu_1006_p1;
wire   [0:0] or_ln329_fu_1048_p2;
wire   [0:0] icmp_ln337_fu_987_p2;
wire   [0:0] xor_ln329_fu_1053_p2;
wire   [0:0] and_ln337_fu_1059_p2;
wire   [7:0] shl_ln339_fu_1014_p2;
wire   [7:0] select_ln330_fu_1040_p3;
wire   [0:0] xor_ln330_fu_1073_p2;
wire   [0:0] and_ln330_1_fu_1079_p2;
wire   [0:0] or_ln330_fu_1085_p2;
wire   [7:0] select_ln337_fu_1065_p3;
wire   [0:0] xor_ln323_fu_1098_p2;
wire   [0:0] and_ln327_fu_1103_p2;
wire   [7:0] select_ln330_1_fu_1090_p3;
wire   [7:0] select_ln327_fu_1108_p3;
wire   [51:0] trunc_ln315_1_fu_1121_p1;
wire   [52:0] p_Result_3_fu_1124_p3;
wire  signed [11:0] sh_amt_3_fu_1141_p2;
wire   [8:0] tmp_10_fu_1150_p4;
wire  signed [31:0] sext_ln331_1_fu_1166_p1;
wire   [53:0] zext_ln320_1_fu_1132_p1;
wire   [53:0] zext_ln331_1_fu_1169_p1;
wire   [53:0] lshr_ln331_1_fu_1173_p2;
wire  signed [31:0] sext_ln326_1_fu_1146_p1;
wire   [7:0] sext_ln326_1cast_fu_1183_p1;
wire   [0:0] or_ln327_1_fu_1192_p2;
wire   [0:0] xor_ln327_1_fu_1196_p2;
wire   [0:0] and_ln329_1_fu_1202_p2;
wire   [0:0] icmp_ln330_1_fu_1136_p2;
wire   [0:0] and_ln330_2_fu_1207_p2;
wire   [7:0] trunc_ln331_1_fu_1179_p1;
wire   [0:0] or_ln329_1_fu_1221_p2;
wire   [0:0] icmp_ln337_1_fu_1160_p2;
wire   [0:0] xor_ln329_1_fu_1226_p2;
wire   [0:0] and_ln337_1_fu_1232_p2;
wire   [7:0] shl_ln339_1_fu_1187_p2;
wire   [7:0] select_ln330_2_fu_1213_p3;
wire   [0:0] xor_ln330_1_fu_1246_p2;
wire   [0:0] and_ln330_3_fu_1252_p2;
wire   [0:0] or_ln330_1_fu_1258_p2;
wire   [7:0] select_ln337_1_fu_1238_p3;
wire   [0:0] xor_ln323_1_fu_1271_p2;
wire   [0:0] and_ln327_1_fu_1276_p2;
wire   [7:0] select_ln330_3_fu_1263_p3;
wire   [7:0] select_ln327_1_fu_1281_p3;
wire   [51:0] trunc_ln315_2_fu_1294_p1;
wire   [52:0] p_Result_5_fu_1297_p3;
wire  signed [11:0] sh_amt_5_fu_1314_p2;
wire   [8:0] tmp_12_fu_1323_p4;
wire  signed [31:0] sext_ln331_2_fu_1339_p1;
wire   [53:0] zext_ln320_2_fu_1305_p1;
wire   [53:0] zext_ln331_2_fu_1342_p1;
wire   [53:0] lshr_ln331_2_fu_1346_p2;
wire  signed [31:0] sext_ln326_2_fu_1319_p1;
wire   [7:0] sext_ln326_2cast_fu_1356_p1;
wire   [0:0] or_ln327_2_fu_1365_p2;
wire   [0:0] xor_ln327_2_fu_1369_p2;
wire   [0:0] and_ln329_2_fu_1375_p2;
wire   [0:0] icmp_ln330_2_fu_1309_p2;
wire   [0:0] and_ln330_4_fu_1380_p2;
wire   [7:0] trunc_ln331_2_fu_1352_p1;
wire   [0:0] or_ln329_2_fu_1394_p2;
wire   [0:0] icmp_ln337_2_fu_1333_p2;
wire   [0:0] xor_ln329_2_fu_1399_p2;
wire   [0:0] and_ln337_2_fu_1405_p2;
wire   [7:0] shl_ln339_2_fu_1360_p2;
wire   [7:0] select_ln330_4_fu_1386_p3;
wire   [0:0] xor_ln330_2_fu_1419_p2;
wire   [0:0] and_ln330_5_fu_1425_p2;
wire   [0:0] or_ln330_2_fu_1431_p2;
wire   [7:0] select_ln337_2_fu_1411_p3;
wire   [0:0] xor_ln323_2_fu_1444_p2;
wire   [0:0] and_ln327_2_fu_1449_p2;
wire   [7:0] select_ln330_5_fu_1436_p3;
wire   [7:0] select_ln327_2_fu_1454_p3;
wire   [7:0] sub_ln455_fu_1115_p2;
wire   [4:0] tmp_fu_1467_p4;
wire   [4:0] tmp_1_fu_1477_p4;
wire   [7:0] sub_ln455_1_fu_1288_p2;
wire   [5:0] tmp_2_fu_1494_p4;
wire   [5:0] tmp_5_fu_1504_p4;
wire   [7:0] sub_ln455_2_fu_1461_p2;
wire   [4:0] tmp_3_fu_1521_p4;
wire   [4:0] tmp_4_fu_1531_p4;
wire   [4:0] select_ln345_1_fu_1487_p3;
wire   [5:0] select_ln345_2_fu_1514_p3;
wire   [4:0] select_ln345_fu_1541_p3;
wire   [2:0] grp_fu_1567_p0;
wire   [16:0] grp_fu_1567_p1;
reg    grp_fu_366_ce;
reg    grp_fu_370_ce;
reg    grp_fu_374_ce;
reg    grp_fu_378_ce;
reg    grp_fu_383_ce;
reg    grp_fu_386_ce;
reg    grp_fu_389_ce;
reg    grp_fu_392_ce;
reg    grp_fu_395_ce;
reg    grp_fu_398_ce;
reg    grp_fu_401_ce;
reg    grp_fu_404_ce;
reg    grp_fu_407_ce;
reg    grp_fu_413_ce;
reg    grp_fu_418_ce;
reg    grp_fu_423_ce;
reg    grp_fu_428_ce;
reg    grp_fu_432_ce;
reg    grp_fu_436_ce;
reg    grp_fu_440_ce;
reg    grp_fu_443_ce;
reg    grp_fu_446_ce;
reg    grp_fu_1567_ce;
wire    ap_CS_fsm_state3;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    pixels0_V_TVALID_int_regslice;
wire    pixels0_V_TREADY_int_regslice;
wire    regslice_both_pixels0_V_U_vld_out;
reg    pixels1_V_TVALID_int_regslice;
wire    pixels1_V_TREADY_int_regslice;
wire    regslice_both_pixels1_V_U_vld_out;
reg    pixels2_V_TVALID_int_regslice;
wire    pixels2_V_TREADY_int_regslice;
wire    regslice_both_pixels2_V_U_vld_out;
reg    pixels3_V_TVALID_int_regslice;
wire    pixels3_V_TREADY_int_regslice;
wire    regslice_both_pixels3_V_U_vld_out;
wire   [18:0] grp_fu_1567_p00;
wire    ap_ce_reg;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter29 = 1'b0;
#0 ap_enable_reg_pp2_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter28 = 1'b0;
end

Blend4_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd0),
    .background_offset(background_offset),
    .foreground_offset(foreground_offset)
);

Blend4_background_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BACKGROUND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BACKGROUND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BACKGROUND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BACKGROUND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BACKGROUND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BACKGROUND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BACKGROUND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BACKGROUND_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BACKGROUND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BACKGROUND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BACKGROUND_CACHE_VALUE ))
background_m_axi_U(
    .AWVALID(m_axi_background_AWVALID),
    .AWREADY(m_axi_background_AWREADY),
    .AWADDR(m_axi_background_AWADDR),
    .AWID(m_axi_background_AWID),
    .AWLEN(m_axi_background_AWLEN),
    .AWSIZE(m_axi_background_AWSIZE),
    .AWBURST(m_axi_background_AWBURST),
    .AWLOCK(m_axi_background_AWLOCK),
    .AWCACHE(m_axi_background_AWCACHE),
    .AWPROT(m_axi_background_AWPROT),
    .AWQOS(m_axi_background_AWQOS),
    .AWREGION(m_axi_background_AWREGION),
    .AWUSER(m_axi_background_AWUSER),
    .WVALID(m_axi_background_WVALID),
    .WREADY(m_axi_background_WREADY),
    .WDATA(m_axi_background_WDATA),
    .WSTRB(m_axi_background_WSTRB),
    .WLAST(m_axi_background_WLAST),
    .WID(m_axi_background_WID),
    .WUSER(m_axi_background_WUSER),
    .ARVALID(m_axi_background_ARVALID),
    .ARREADY(m_axi_background_ARREADY),
    .ARADDR(m_axi_background_ARADDR),
    .ARID(m_axi_background_ARID),
    .ARLEN(m_axi_background_ARLEN),
    .ARSIZE(m_axi_background_ARSIZE),
    .ARBURST(m_axi_background_ARBURST),
    .ARLOCK(m_axi_background_ARLOCK),
    .ARCACHE(m_axi_background_ARCACHE),
    .ARPROT(m_axi_background_ARPROT),
    .ARQOS(m_axi_background_ARQOS),
    .ARREGION(m_axi_background_ARREGION),
    .ARUSER(m_axi_background_ARUSER),
    .RVALID(m_axi_background_RVALID),
    .RREADY(m_axi_background_RREADY),
    .RDATA(m_axi_background_RDATA),
    .RLAST(m_axi_background_RLAST),
    .RID(m_axi_background_RID),
    .RUSER(m_axi_background_RUSER),
    .RRESP(m_axi_background_RRESP),
    .BVALID(m_axi_background_BVALID),
    .BREADY(m_axi_background_BREADY),
    .BRESP(m_axi_background_BRESP),
    .BID(m_axi_background_BID),
    .BUSER(m_axi_background_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(background_ARVALID),
    .I_ARREADY(background_ARREADY),
    .I_ARADDR(background_addr_reg_1625),
    .I_ARID(1'd0),
    .I_ARLEN(32'd240),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(background_RVALID),
    .I_RREADY(background_RREADY),
    .I_RDATA(background_RDATA),
    .I_RID(background_RID),
    .I_RUSER(background_RUSER),
    .I_RRESP(background_RRESP),
    .I_RLAST(background_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(background_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(background_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(background_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(background_BRESP),
    .I_BID(background_BID),
    .I_BUSER(background_BUSER)
);

Blend4_foreground_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_FOREGROUND_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_FOREGROUND_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_FOREGROUND_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_FOREGROUND_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_FOREGROUND_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_FOREGROUND_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_FOREGROUND_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_FOREGROUND_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_FOREGROUND_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_FOREGROUND_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_FOREGROUND_CACHE_VALUE ))
foreground_m_axi_U(
    .AWVALID(m_axi_foreground_AWVALID),
    .AWREADY(m_axi_foreground_AWREADY),
    .AWADDR(m_axi_foreground_AWADDR),
    .AWID(m_axi_foreground_AWID),
    .AWLEN(m_axi_foreground_AWLEN),
    .AWSIZE(m_axi_foreground_AWSIZE),
    .AWBURST(m_axi_foreground_AWBURST),
    .AWLOCK(m_axi_foreground_AWLOCK),
    .AWCACHE(m_axi_foreground_AWCACHE),
    .AWPROT(m_axi_foreground_AWPROT),
    .AWQOS(m_axi_foreground_AWQOS),
    .AWREGION(m_axi_foreground_AWREGION),
    .AWUSER(m_axi_foreground_AWUSER),
    .WVALID(m_axi_foreground_WVALID),
    .WREADY(m_axi_foreground_WREADY),
    .WDATA(m_axi_foreground_WDATA),
    .WSTRB(m_axi_foreground_WSTRB),
    .WLAST(m_axi_foreground_WLAST),
    .WID(m_axi_foreground_WID),
    .WUSER(m_axi_foreground_WUSER),
    .ARVALID(m_axi_foreground_ARVALID),
    .ARREADY(m_axi_foreground_ARREADY),
    .ARADDR(m_axi_foreground_ARADDR),
    .ARID(m_axi_foreground_ARID),
    .ARLEN(m_axi_foreground_ARLEN),
    .ARSIZE(m_axi_foreground_ARSIZE),
    .ARBURST(m_axi_foreground_ARBURST),
    .ARLOCK(m_axi_foreground_ARLOCK),
    .ARCACHE(m_axi_foreground_ARCACHE),
    .ARPROT(m_axi_foreground_ARPROT),
    .ARQOS(m_axi_foreground_ARQOS),
    .ARREGION(m_axi_foreground_ARREGION),
    .ARUSER(m_axi_foreground_ARUSER),
    .RVALID(m_axi_foreground_RVALID),
    .RREADY(m_axi_foreground_RREADY),
    .RDATA(m_axi_foreground_RDATA),
    .RLAST(m_axi_foreground_RLAST),
    .RID(m_axi_foreground_RID),
    .RUSER(m_axi_foreground_RUSER),
    .RRESP(m_axi_foreground_RRESP),
    .BVALID(m_axi_foreground_BVALID),
    .BREADY(m_axi_foreground_BREADY),
    .BRESP(m_axi_foreground_BRESP),
    .BID(m_axi_foreground_BID),
    .BUSER(m_axi_foreground_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(foreground_ARVALID),
    .I_ARREADY(foreground_ARREADY),
    .I_ARADDR(foreground_addr_reg_1645),
    .I_ARID(1'd0),
    .I_ARLEN(32'd240),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(foreground_RVALID),
    .I_RREADY(foreground_RREADY),
    .I_RDATA(foreground_RDATA),
    .I_RID(foreground_RID),
    .I_RUSER(foreground_RUSER),
    .I_RRESP(foreground_RRESP),
    .I_RLAST(foreground_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(foreground_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(foreground_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(foreground_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(foreground_BRESP),
    .I_BID(foreground_BID),
    .I_BUSER(foreground_BUSER)
);

Blend4_fgLineBuff #(
    .DataWidth( 32 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
fgLineBuff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fgLineBuff_address0),
    .ce0(fgLineBuff_ce0),
    .we0(fgLineBuff_we0),
    .d0(foreground_addr_read_reg_1660),
    .q0(fgLineBuff_q0)
);

Blend4_fgLineBuff #(
    .DataWidth( 32 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
bgLineBuff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bgLineBuff_address0),
    .ce0(bgLineBuff_ce0),
    .we0(bgLineBuff_we0),
    .d0(background_addr_read_reg_1640),
    .q0(bgLineBuff_q0)
);

Blend4_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(alpha_reg_1713_pp2_iter20_reg),
    .din1(conv_i1_reg_1783),
    .ce(grp_fu_366_ce),
    .dout(grp_fu_366_p2)
);

Blend4_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(alpha_reg_1713_pp2_iter20_reg),
    .din1(conv_i3_reg_1788),
    .ce(grp_fu_370_ce),
    .dout(grp_fu_370_p2)
);

Blend4_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(alpha_reg_1713_pp2_iter20_reg),
    .din1(conv_i5_reg_1793),
    .ce(grp_fu_374_ce),
    .dout(grp_fu_374_p2)
);

Blend4_fdiv_32ns_32ns_32_9_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_9_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_reg_1708),
    .din1(32'd1132396544),
    .ce(grp_fu_378_ce),
    .dout(grp_fu_378_p2)
);

Blend4_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_383_p0),
    .ce(grp_fu_383_ce),
    .dout(grp_fu_383_p1)
);

Blend4_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_386_p0),
    .ce(grp_fu_386_ce),
    .dout(grp_fu_386_p1)
);

Blend4_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_389_p0),
    .ce(grp_fu_389_ce),
    .dout(grp_fu_389_p1)
);

Blend4_uitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_4_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_392_p0),
    .ce(grp_fu_392_ce),
    .dout(grp_fu_392_p1)
);

Blend4_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(alpha_reg_1713),
    .ce(grp_fu_395_ce),
    .dout(grp_fu_395_p1)
);

Blend4_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_i2_reg_1798),
    .ce(grp_fu_398_ce),
    .dout(grp_fu_398_p1)
);

Blend4_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_i4_reg_1803),
    .ce(grp_fu_401_ce),
    .dout(grp_fu_401_p1)
);

Blend4_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_i_reg_1808),
    .ce(grp_fu_404_ce),
    .dout(grp_fu_404_p1)
);

Blend4_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd4607182418800017408),
    .din1(grp_fu_395_p1),
    .ce(grp_fu_407_ce),
    .dout(grp_fu_407_p2)
);

Blend4_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_i1_reg_1813),
    .din1(grp_fu_398_p1),
    .ce(grp_fu_413_ce),
    .dout(grp_fu_413_p2)
);

Blend4_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_i3_reg_1818),
    .din1(grp_fu_401_p1),
    .ce(grp_fu_418_ce),
    .dout(grp_fu_418_p2)
);

Blend4_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_i5_reg_1823),
    .din1(grp_fu_404_p1),
    .ce(grp_fu_423_ce),
    .dout(grp_fu_423_p2)
);

Blend4_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_reg_1761),
    .din1(conv_i_reg_1768),
    .ce(grp_fu_428_ce),
    .dout(grp_fu_428_p2)
);

Blend4_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_reg_1761),
    .din1(conv_i2_reg_1773),
    .ce(grp_fu_432_ce),
    .dout(grp_fu_432_p2)
);

Blend4_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_reg_1761),
    .din1(conv_i4_reg_1778),
    .ce(grp_fu_436_ce),
    .dout(grp_fu_436_p2)
);

Blend4_uitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_4_no_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_440_p0),
    .ce(grp_fu_440_ce),
    .dout(grp_fu_440_p1)
);

Blend4_uitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_4_no_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .ce(grp_fu_443_ce),
    .dout(grp_fu_443_p1)
);

Blend4_uitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_4_no_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_446_p0),
    .ce(grp_fu_446_ce),
    .dout(grp_fu_446_p1)
);

Blend4_mac_muladd_3ns_17ns_17s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 19 ))
mac_muladd_3ns_17ns_17s_19_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1567_p0),
    .din1(grp_fu_1567_p1),
    .din2(select_ln32_1_reg_1600),
    .ce(grp_fu_1567_ce),
    .dout(grp_fu_1567_p3)
);

Blend4_regslice_both #(
    .DataWidth( 16 ))
regslice_both_pixels0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pixel_V_fu_1548_p4),
    .vld_in(pixels0_V_TVALID_int_regslice),
    .ack_in(pixels0_V_TREADY_int_regslice),
    .data_out(pixels0_V_TDATA),
    .vld_out(regslice_both_pixels0_V_U_vld_out),
    .ack_out(pixels0_V_TREADY),
    .apdone_blk(regslice_both_pixels0_V_U_apdone_blk)
);

Blend4_regslice_both #(
    .DataWidth( 16 ))
regslice_both_pixels1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pixel_V_fu_1548_p4),
    .vld_in(pixels1_V_TVALID_int_regslice),
    .ack_in(pixels1_V_TREADY_int_regslice),
    .data_out(pixels1_V_TDATA),
    .vld_out(regslice_both_pixels1_V_U_vld_out),
    .ack_out(pixels1_V_TREADY),
    .apdone_blk(regslice_both_pixels1_V_U_apdone_blk)
);

Blend4_regslice_both #(
    .DataWidth( 16 ))
regslice_both_pixels2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pixel_V_fu_1548_p4),
    .vld_in(pixels2_V_TVALID_int_regslice),
    .ack_in(pixels2_V_TREADY_int_regslice),
    .data_out(pixels2_V_TDATA),
    .vld_out(regslice_both_pixels2_V_U_vld_out),
    .ack_out(pixels2_V_TREADY),
    .apdone_blk(regslice_both_pixels2_V_U_apdone_blk)
);

Blend4_regslice_both #(
    .DataWidth( 16 ))
regslice_both_pixels3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pixel_V_fu_1548_p4),
    .vld_in(pixels3_V_TVALID_int_regslice),
    .ack_in(pixels3_V_TREADY_int_regslice),
    .data_out(pixels3_V_TDATA),
    .vld_out(regslice_both_pixels3_V_U_vld_out),
    .ack_out(pixels3_V_TREADY),
    .apdone_blk(regslice_both_pixels3_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state24)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter30 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_667_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        col_reg_355 <= add_ln36_fu_661_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        col_reg_355 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        indvar_flatten_reg_298 <= add_ln32_reg_1586;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_298 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        lcd_reg_320 <= add_ln33_fu_1562_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        lcd_reg_320 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond13_reg_1636 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        loop_index318_reg_331 <= empty_55_reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_index318_reg_331 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond31914_reg_1656 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index_reg_343 <= empty_58_reg_1651;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        loop_index_reg_343 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        row_reg_309 <= select_ln32_2_reg_1605;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_309 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln32_reg_1586 <= add_ln32_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        alpha_reg_1713 <= grp_fu_378_p2;
        alpha_reg_1713_pp2_iter14_reg <= alpha_reg_1713;
        alpha_reg_1713_pp2_iter15_reg <= alpha_reg_1713_pp2_iter14_reg;
        alpha_reg_1713_pp2_iter16_reg <= alpha_reg_1713_pp2_iter15_reg;
        alpha_reg_1713_pp2_iter17_reg <= alpha_reg_1713_pp2_iter16_reg;
        alpha_reg_1713_pp2_iter18_reg <= alpha_reg_1713_pp2_iter17_reg;
        alpha_reg_1713_pp2_iter19_reg <= alpha_reg_1713_pp2_iter18_reg;
        alpha_reg_1713_pp2_iter20_reg <= alpha_reg_1713_pp2_iter19_reg;
        col_cast_reg_1678_pp2_iter10_reg[7 : 0] <= col_cast_reg_1678_pp2_iter9_reg[7 : 0];
        col_cast_reg_1678_pp2_iter11_reg[7 : 0] <= col_cast_reg_1678_pp2_iter10_reg[7 : 0];
        col_cast_reg_1678_pp2_iter12_reg[7 : 0] <= col_cast_reg_1678_pp2_iter11_reg[7 : 0];
        col_cast_reg_1678_pp2_iter13_reg[7 : 0] <= col_cast_reg_1678_pp2_iter12_reg[7 : 0];
        col_cast_reg_1678_pp2_iter14_reg[7 : 0] <= col_cast_reg_1678_pp2_iter13_reg[7 : 0];
        col_cast_reg_1678_pp2_iter2_reg[7 : 0] <= col_cast_reg_1678_pp2_iter1_reg[7 : 0];
        col_cast_reg_1678_pp2_iter3_reg[7 : 0] <= col_cast_reg_1678_pp2_iter2_reg[7 : 0];
        col_cast_reg_1678_pp2_iter4_reg[7 : 0] <= col_cast_reg_1678_pp2_iter3_reg[7 : 0];
        col_cast_reg_1678_pp2_iter5_reg[7 : 0] <= col_cast_reg_1678_pp2_iter4_reg[7 : 0];
        col_cast_reg_1678_pp2_iter6_reg[7 : 0] <= col_cast_reg_1678_pp2_iter5_reg[7 : 0];
        col_cast_reg_1678_pp2_iter7_reg[7 : 0] <= col_cast_reg_1678_pp2_iter6_reg[7 : 0];
        col_cast_reg_1678_pp2_iter8_reg[7 : 0] <= col_cast_reg_1678_pp2_iter7_reg[7 : 0];
        col_cast_reg_1678_pp2_iter9_reg[7 : 0] <= col_cast_reg_1678_pp2_iter8_reg[7 : 0];
        conv_i1_reg_1783 <= grp_fu_386_p1;
        conv_i2_reg_1773 <= grp_fu_443_p1;
        conv_i3_reg_1788 <= grp_fu_389_p1;
        conv_i4_reg_1778 <= grp_fu_446_p1;
        conv_i5_reg_1793 <= grp_fu_392_p1;
        conv_i_reg_1768 <= grp_fu_440_p1;
        conv_reg_1708 <= grp_fu_383_p1;
        fgb_V_reg_1698_pp2_iter10_reg <= fgb_V_reg_1698_pp2_iter9_reg;
        fgb_V_reg_1698_pp2_iter11_reg <= fgb_V_reg_1698_pp2_iter10_reg;
        fgb_V_reg_1698_pp2_iter12_reg <= fgb_V_reg_1698_pp2_iter11_reg;
        fgb_V_reg_1698_pp2_iter13_reg <= fgb_V_reg_1698_pp2_iter12_reg;
        fgb_V_reg_1698_pp2_iter14_reg <= fgb_V_reg_1698_pp2_iter13_reg;
        fgb_V_reg_1698_pp2_iter15_reg <= fgb_V_reg_1698_pp2_iter14_reg;
        fgb_V_reg_1698_pp2_iter16_reg <= fgb_V_reg_1698_pp2_iter15_reg;
        fgb_V_reg_1698_pp2_iter2_reg <= fgb_V_reg_1698;
        fgb_V_reg_1698_pp2_iter3_reg <= fgb_V_reg_1698_pp2_iter2_reg;
        fgb_V_reg_1698_pp2_iter4_reg <= fgb_V_reg_1698_pp2_iter3_reg;
        fgb_V_reg_1698_pp2_iter5_reg <= fgb_V_reg_1698_pp2_iter4_reg;
        fgb_V_reg_1698_pp2_iter6_reg <= fgb_V_reg_1698_pp2_iter5_reg;
        fgb_V_reg_1698_pp2_iter7_reg <= fgb_V_reg_1698_pp2_iter6_reg;
        fgb_V_reg_1698_pp2_iter8_reg <= fgb_V_reg_1698_pp2_iter7_reg;
        fgb_V_reg_1698_pp2_iter9_reg <= fgb_V_reg_1698_pp2_iter8_reg;
        fgg_V_reg_1693_pp2_iter10_reg <= fgg_V_reg_1693_pp2_iter9_reg;
        fgg_V_reg_1693_pp2_iter11_reg <= fgg_V_reg_1693_pp2_iter10_reg;
        fgg_V_reg_1693_pp2_iter12_reg <= fgg_V_reg_1693_pp2_iter11_reg;
        fgg_V_reg_1693_pp2_iter13_reg <= fgg_V_reg_1693_pp2_iter12_reg;
        fgg_V_reg_1693_pp2_iter14_reg <= fgg_V_reg_1693_pp2_iter13_reg;
        fgg_V_reg_1693_pp2_iter15_reg <= fgg_V_reg_1693_pp2_iter14_reg;
        fgg_V_reg_1693_pp2_iter16_reg <= fgg_V_reg_1693_pp2_iter15_reg;
        fgg_V_reg_1693_pp2_iter2_reg <= fgg_V_reg_1693;
        fgg_V_reg_1693_pp2_iter3_reg <= fgg_V_reg_1693_pp2_iter2_reg;
        fgg_V_reg_1693_pp2_iter4_reg <= fgg_V_reg_1693_pp2_iter3_reg;
        fgg_V_reg_1693_pp2_iter5_reg <= fgg_V_reg_1693_pp2_iter4_reg;
        fgg_V_reg_1693_pp2_iter6_reg <= fgg_V_reg_1693_pp2_iter5_reg;
        fgg_V_reg_1693_pp2_iter7_reg <= fgg_V_reg_1693_pp2_iter6_reg;
        fgg_V_reg_1693_pp2_iter8_reg <= fgg_V_reg_1693_pp2_iter7_reg;
        fgg_V_reg_1693_pp2_iter9_reg <= fgg_V_reg_1693_pp2_iter8_reg;
        fgr_V_reg_1688_pp2_iter10_reg <= fgr_V_reg_1688_pp2_iter9_reg;
        fgr_V_reg_1688_pp2_iter11_reg <= fgr_V_reg_1688_pp2_iter10_reg;
        fgr_V_reg_1688_pp2_iter12_reg <= fgr_V_reg_1688_pp2_iter11_reg;
        fgr_V_reg_1688_pp2_iter13_reg <= fgr_V_reg_1688_pp2_iter12_reg;
        fgr_V_reg_1688_pp2_iter14_reg <= fgr_V_reg_1688_pp2_iter13_reg;
        fgr_V_reg_1688_pp2_iter15_reg <= fgr_V_reg_1688_pp2_iter14_reg;
        fgr_V_reg_1688_pp2_iter16_reg <= fgr_V_reg_1688_pp2_iter15_reg;
        fgr_V_reg_1688_pp2_iter2_reg <= fgr_V_reg_1688;
        fgr_V_reg_1688_pp2_iter3_reg <= fgr_V_reg_1688_pp2_iter2_reg;
        fgr_V_reg_1688_pp2_iter4_reg <= fgr_V_reg_1688_pp2_iter3_reg;
        fgr_V_reg_1688_pp2_iter5_reg <= fgr_V_reg_1688_pp2_iter4_reg;
        fgr_V_reg_1688_pp2_iter6_reg <= fgr_V_reg_1688_pp2_iter5_reg;
        fgr_V_reg_1688_pp2_iter7_reg <= fgr_V_reg_1688_pp2_iter6_reg;
        fgr_V_reg_1688_pp2_iter8_reg <= fgr_V_reg_1688_pp2_iter7_reg;
        fgr_V_reg_1688_pp2_iter9_reg <= fgr_V_reg_1688_pp2_iter8_reg;
        i_op_assign_reg_1761 <= grp_fu_407_p2;
        icmp_ln323_1_reg_1901 <= icmp_ln323_1_fu_866_p2;
        icmp_ln323_2_reg_1943 <= icmp_ln323_2_fu_924_p2;
        icmp_ln323_reg_1859 <= icmp_ln323_fu_808_p2;
        icmp_ln327_1_reg_1915 <= icmp_ln327_1_fu_878_p2;
        icmp_ln327_2_reg_1957 <= icmp_ln327_2_fu_936_p2;
        icmp_ln327_reg_1873 <= icmp_ln327_fu_820_p2;
        icmp_ln329_1_reg_1921 <= icmp_ln329_1_fu_884_p2;
        icmp_ln329_2_reg_1963 <= icmp_ln329_2_fu_942_p2;
        icmp_ln329_reg_1879 <= icmp_ln329_fu_826_p2;
        mul_i1_reg_1813 <= grp_fu_428_p2;
        mul_i2_reg_1798 <= grp_fu_366_p2;
        mul_i3_reg_1818 <= grp_fu_432_p2;
        mul_i4_reg_1803 <= grp_fu_370_p2;
        mul_i5_reg_1823 <= grp_fu_436_p2;
        mul_i_reg_1808 <= grp_fu_374_p2;
        p_Result_2_reg_1890 <= reg_1_fu_832_p1[32'd63];
        p_Result_4_reg_1932 <= reg_2_fu_890_p1[32'd63];
        p_Result_s_reg_1848 <= reg_fu_774_p1[32'd63];
        reg_1_reg_1885 <= reg_1_fu_832_p1;
        reg_2_reg_1927 <= reg_2_fu_890_p1;
        reg_reg_1843 <= reg_fu_774_p1;
        sh_amt_2_reg_1908 <= sh_amt_2_fu_872_p2;
        sh_amt_4_reg_1950 <= sh_amt_4_fu_930_p2;
        sh_amt_reg_1866 <= sh_amt_fu_814_p2;
        trunc_ln328_1_reg_1895 <= trunc_ln328_1_fu_862_p1;
        trunc_ln328_2_reg_1937 <= trunc_ln328_2_fu_920_p1;
        trunc_ln328_reg_1853 <= trunc_ln328_fu_804_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond13_reg_1636 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        background_addr_read_reg_1640 <= background_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        background_addr_reg_1625 <= sext_ln34_fu_590_p1;
        sext_ln34_1_reg_1620[63 : 2] <= sext_ln34_1_fu_571_p1[63 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        background_offset_read_reg_1581 <= background_offset;
        foreground_offset_read_reg_1576 <= foreground_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_667_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        col_cast_reg_1678[7 : 0] <= col_cast_fu_673_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        col_cast_reg_1678_pp2_iter1_reg[7 : 0] <= col_cast_reg_1678[7 : 0];
        fgb_V_reg_1698 <= {{fgLineBuff_q0[15:8]}};
        fgg_V_reg_1693 <= {{fgLineBuff_q0[23:16]}};
        fgr_V_reg_1688 <= {{fgLineBuff_q0[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_55_reg_1631 <= empty_55_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_58_reg_1651 <= empty_58_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        empty_60_reg_1665 <= empty_60_fu_658_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond13_reg_1636 <= exitcond13_fu_606_p2;
        exitcond13_reg_1636_pp0_iter1_reg <= exitcond13_reg_1636;
        loop_index318_reg_331_pp0_iter1_reg <= loop_index318_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond31914_reg_1656 <= exitcond31914_fu_647_p2;
        exitcond31914_reg_1656_pp1_iter1_reg <= exitcond31914_reg_1656;
        loop_index_reg_343_pp1_iter1_reg <= loop_index_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond31914_reg_1656 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        foreground_addr_read_reg_1660 <= foreground_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        foreground_addr_reg_1645 <= sext_ln35_fu_631_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln32_1_reg_1600[16 : 4] <= select_ln32_1_fu_541_p3[16 : 4];
        select_ln32_reg_1594 <= select_ln32_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (icmp_ln32_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln32_2_reg_1605 <= select_ln32_2_fu_549_p3;
    end
end

always @ (*) begin
    if ((exitcond13_fu_606_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond31914_fu_647_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_667_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (icmp_ln32_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b0) & (ap_enable_reg_pp2_iter29 == 1'b0) & (ap_enable_reg_pp2_iter28 == 1'b0) & (ap_enable_reg_pp2_iter27 == 1'b0) & (ap_enable_reg_pp2_iter26 == 1'b0) & (ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond13_reg_1636 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_loop_index318_phi_fu_335_p4 = empty_55_reg_1631;
    end else begin
        ap_phi_mux_loop_index318_phi_fu_335_p4 = loop_index318_reg_331;
    end
end

always @ (*) begin
    if (((exitcond31914_reg_1656 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_loop_index_phi_fu_347_p4 = empty_58_reg_1651;
    end else begin
        ap_phi_mux_loop_index_phi_fu_347_p4 = loop_index_reg_343;
    end
end

always @ (*) begin
    if ((~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (icmp_ln32_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((background_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        background_ARVALID = 1'b1;
    end else begin
        background_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond13_reg_1636 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        background_RREADY = 1'b1;
    end else begin
        background_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        background_blk_n_AR = m_axi_background_ARREADY;
    end else begin
        background_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond13_reg_1636 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        background_blk_n_R = m_axi_background_RVALID;
    end else begin
        background_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter15 == 1'b1))) begin
        bgLineBuff_address0 = col_cast_reg_1678_pp2_iter14_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bgLineBuff_address0 = loop_index318_cast_fu_612_p1;
    end else begin
        bgLineBuff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter15 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bgLineBuff_ce0 = 1'b1;
    end else begin
        bgLineBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond13_reg_1636_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bgLineBuff_we0 = 1'b1;
    end else begin
        bgLineBuff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        fgLineBuff_address0 = col_cast_fu_673_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        fgLineBuff_address0 = loop_index_cast_fu_653_p1;
    end else begin
        fgLineBuff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        fgLineBuff_ce0 = 1'b1;
    end else begin
        fgLineBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond31914_reg_1656_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        fgLineBuff_we0 = 1'b1;
    end else begin
        fgLineBuff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((foreground_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        foreground_ARVALID = 1'b1;
    end else begin
        foreground_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond31914_reg_1656 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        foreground_RREADY = 1'b1;
    end else begin
        foreground_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        foreground_blk_n_AR = m_axi_foreground_ARREADY;
    end else begin
        foreground_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond31914_reg_1656 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        foreground_blk_n_R = m_axi_foreground_RVALID;
    end else begin
        foreground_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_1567_ce = 1'b1;
    end else begin
        grp_fu_1567_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_366_ce = 1'b1;
    end else begin
        grp_fu_366_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_370_ce = 1'b1;
    end else begin
        grp_fu_370_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_378_ce = 1'b1;
    end else begin
        grp_fu_378_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_383_ce = 1'b1;
    end else begin
        grp_fu_383_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_386_ce = 1'b1;
    end else begin
        grp_fu_386_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_389_ce = 1'b1;
    end else begin
        grp_fu_389_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_392_ce = 1'b1;
    end else begin
        grp_fu_392_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_395_ce = 1'b1;
    end else begin
        grp_fu_395_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_398_ce = 1'b1;
    end else begin
        grp_fu_398_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_401_ce = 1'b1;
    end else begin
        grp_fu_401_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_404_ce = 1'b1;
    end else begin
        grp_fu_404_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_407_ce = 1'b1;
    end else begin
        grp_fu_407_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_413_ce = 1'b1;
    end else begin
        grp_fu_413_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_418_ce = 1'b1;
    end else begin
        grp_fu_418_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_423_ce = 1'b1;
    end else begin
        grp_fu_423_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_428_ce = 1'b1;
    end else begin
        grp_fu_428_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_432_ce = 1'b1;
    end else begin
        grp_fu_432_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_436_ce = 1'b1;
    end else begin
        grp_fu_436_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_440_ce = 1'b1;
    end else begin
        grp_fu_440_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_443_ce = 1'b1;
    end else begin
        grp_fu_443_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        grp_fu_446_ce = 1'b1;
    end else begin
        grp_fu_446_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter30 == 1'b1) & (empty_60_reg_1665 == 2'd0) & (1'b0 == ap_block_pp2_stage0)) | ((empty_60_reg_1665 == 2'd0) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0)))) begin
        pixels0_V_TDATA_blk_n = pixels0_V_TREADY_int_regslice;
    end else begin
        pixels0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_60_reg_1665 == 2'd0) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        pixels0_V_TVALID_int_regslice = 1'b1;
    end else begin
        pixels0_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_60_reg_1665 == 2'd1) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((ap_enable_reg_pp2_iter30 == 1'b1) & (empty_60_reg_1665 == 2'd1) & (1'b0 == ap_block_pp2_stage0)))) begin
        pixels1_V_TDATA_blk_n = pixels1_V_TREADY_int_regslice;
    end else begin
        pixels1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_60_reg_1665 == 2'd1) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        pixels1_V_TVALID_int_regslice = 1'b1;
    end else begin
        pixels1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_60_reg_1665 == 2'd2) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((ap_enable_reg_pp2_iter30 == 1'b1) & (empty_60_reg_1665 == 2'd2) & (1'b0 == ap_block_pp2_stage0)))) begin
        pixels2_V_TDATA_blk_n = pixels2_V_TREADY_int_regslice;
    end else begin
        pixels2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_60_reg_1665 == 2'd2) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        pixels2_V_TVALID_int_regslice = 1'b1;
    end else begin
        pixels2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((empty_60_reg_1665 == 2'd3) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((ap_enable_reg_pp2_iter30 == 1'b1) & (empty_60_reg_1665 == 2'd3) & (1'b0 == ap_block_pp2_stage0)))) begin
        pixels3_V_TDATA_blk_n = pixels3_V_TREADY_int_regslice;
    end else begin
        pixels3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_60_reg_1665 == 2'd3) & (ap_enable_reg_pp2_iter29 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        pixels3_V_TVALID_int_regslice = 1'b1;
    end else begin
        pixels3_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (icmp_ln32_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1)) & (icmp_ln32_fu_485_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((background_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond13_fu_606_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond13_fu_606_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((foreground_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond31914_fu_647_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond31914_fu_647_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln36_fu_667_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter30 == 1'b1) & (ap_enable_reg_pp2_iter29 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln36_fu_667_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter30 == 1'b1) & (ap_enable_reg_pp2_iter29 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_505_p2 = (row_reg_309 + 8'd1);

assign add_ln32_fu_449_p2 = (indvar_flatten_reg_298 + 10'd1);

assign add_ln33_fu_1562_p2 = (select_ln32_reg_1594 + 3'd1);

assign add_ln34_1_fu_575_p2 = ($signed(sext_ln34_1_fu_571_p1) + $signed(background_offset_read_reg_1581));

assign add_ln34_2_fu_617_p2 = ($signed(sext_ln34_1_reg_1620) + $signed(foreground_offset_read_reg_1576));

assign add_ln36_fu_661_p2 = (col_reg_355 + 8'd1);

assign and_ln327_1_fu_1276_p2 = (xor_ln323_1_fu_1271_p2 & icmp_ln327_1_reg_1915);

assign and_ln327_2_fu_1449_p2 = (xor_ln323_2_fu_1444_p2 & icmp_ln327_2_reg_1957);

assign and_ln327_fu_1103_p2 = (xor_ln323_fu_1098_p2 & icmp_ln327_reg_1873);

assign and_ln329_1_fu_1202_p2 = (xor_ln327_1_fu_1196_p2 & icmp_ln329_1_reg_1921);

assign and_ln329_2_fu_1375_p2 = (xor_ln327_2_fu_1369_p2 & icmp_ln329_2_reg_1963);

assign and_ln329_fu_1029_p2 = (xor_ln327_fu_1023_p2 & icmp_ln329_reg_1879);

assign and_ln330_1_fu_1079_p2 = (xor_ln330_fu_1073_p2 & and_ln329_fu_1029_p2);

assign and_ln330_2_fu_1207_p2 = (icmp_ln330_1_fu_1136_p2 & and_ln329_1_fu_1202_p2);

assign and_ln330_3_fu_1252_p2 = (xor_ln330_1_fu_1246_p2 & and_ln329_1_fu_1202_p2);

assign and_ln330_4_fu_1380_p2 = (icmp_ln330_2_fu_1309_p2 & and_ln329_2_fu_1375_p2);

assign and_ln330_5_fu_1425_p2 = (xor_ln330_2_fu_1419_p2 & and_ln329_2_fu_1375_p2);

assign and_ln330_fu_1034_p2 = (icmp_ln330_fu_963_p2 & and_ln329_fu_1029_p2);

assign and_ln337_1_fu_1232_p2 = (xor_ln329_1_fu_1226_p2 & icmp_ln337_1_fu_1160_p2);

assign and_ln337_2_fu_1405_p2 = (xor_ln329_2_fu_1399_p2 & icmp_ln337_2_fu_1333_p2);

assign and_ln337_fu_1059_p2 = (xor_ln329_fu_1053_p2 & icmp_ln337_fu_987_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((background_RVALID == 1'b0) & (exitcond13_reg_1636 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((background_RVALID == 1'b0) & (exitcond13_reg_1636 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((foreground_RVALID == 1'b0) & (exitcond31914_reg_1656 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((foreground_RVALID == 1'b0) & (exitcond31914_reg_1656 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((ap_enable_reg_pp2_iter30 == 1'b1) & (((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter29 == 1'b1) & (((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter30 == 1'b1) & ((1'b1 == ap_block_state58_io) | ((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter29 == 1'b1) & ((1'b1 == ap_block_state57_io) | ((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter30 == 1'b1) & ((1'b1 == ap_block_state58_io) | ((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter29 == 1'b1) & ((1'b1 == ap_block_state57_io) | ((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)))));
end

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1 = ((background_RVALID == 1'b0) & (exitcond13_reg_1636 == 1'd0));
end

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((regslice_both_pixels3_V_U_apdone_blk == 1'b1) | (regslice_both_pixels2_V_U_apdone_blk == 1'b1) | (regslice_both_pixels1_V_U_apdone_blk == 1'b1) | (regslice_both_pixels0_V_U_apdone_blk == 1'b1));
end

assign ap_block_state24_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp1_stage0_iter1 = ((foreground_RVALID == 1'b0) & (exitcond31914_reg_1656 == 1'd0));
end

assign ap_block_state26_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage0_iter28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state57_io = (((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state57_pp2_stage0_iter29 = (((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state58_io = (((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state58_pp2_stage0_iter30 = (((empty_60_reg_1665 == 2'd3) & (pixels3_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd2) & (pixels2_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd1) & (pixels1_V_TREADY_int_regslice == 1'b0)) | ((empty_60_reg_1665 == 2'd0) & (pixels0_V_TREADY_int_regslice == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bgb_V_fu_737_p4 = {{bgLineBuff_q0[15:8]}};

assign bgg_V_fu_727_p4 = {{bgLineBuff_q0[23:16]}};

assign bgr_V_fu_717_p4 = {{bgLineBuff_q0[31:24]}};

assign col_cast_fu_673_p1 = col_reg_355;

assign empty_55_fu_600_p2 = (ap_phi_mux_loop_index318_phi_fu_335_p4 + 8'd1);

assign empty_58_fu_641_p2 = (ap_phi_mux_loop_index_phi_fu_347_p4 + 8'd1);

assign empty_60_fu_658_p1 = select_ln32_reg_1594[1:0];

assign empty_fu_479_p2 = (p_shl_cast_fu_463_p1 - p_shl1_cast_fu_475_p1);

assign exitcond13_fu_606_p2 = ((ap_phi_mux_loop_index318_phi_fu_335_p4 == 8'd240) ? 1'b1 : 1'b0);

assign exitcond31914_fu_647_p2 = ((ap_phi_mux_loop_index_phi_fu_347_p4 == 8'd240) ? 1'b1 : 1'b0);

assign exp_1_fu_848_p4 = {{reg_1_fu_832_p1[62:52]}};

assign exp_2_fu_906_p4 = {{reg_2_fu_890_p1[62:52]}};

assign exp_fu_790_p4 = {{reg_fu_774_p1[62:52]}};

assign fga_V_fu_708_p1 = fgLineBuff_q0[7:0];

assign grp_fu_1567_p0 = grp_fu_1567_p00;

assign grp_fu_1567_p00 = select_ln32_fu_497_p3;

assign grp_fu_1567_p1 = 19'd57600;

assign grp_fu_383_p0 = fga_V_fu_708_p1;

assign grp_fu_386_p0 = fgr_V_reg_1688_pp2_iter16_reg;

assign grp_fu_389_p0 = fgg_V_reg_1693_pp2_iter16_reg;

assign grp_fu_392_p0 = fgb_V_reg_1698_pp2_iter16_reg;

assign grp_fu_440_p0 = bgr_V_fu_717_p4;

assign grp_fu_443_p0 = bgg_V_fu_727_p4;

assign grp_fu_446_p0 = bgb_V_fu_737_p4;

assign icmp_ln323_1_fu_866_p2 = ((trunc_ln306_1_fu_836_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_2_fu_924_p2 = ((trunc_ln306_2_fu_894_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_808_p2 = ((trunc_ln306_fu_778_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln327_1_fu_878_p2 = ((exp_1_fu_848_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln327_2_fu_936_p2 = ((exp_2_fu_906_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln327_fu_820_p2 = ((exp_fu_790_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln329_1_fu_884_p2 = (($signed(sh_amt_2_fu_872_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln329_2_fu_942_p2 = (($signed(sh_amt_4_fu_930_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_826_p2 = (($signed(sh_amt_fu_814_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_485_p2 = ((indvar_flatten_reg_298 == 10'd960) ? 1'b1 : 1'b0);

assign icmp_ln330_1_fu_1136_p2 = (($signed(sh_amt_2_reg_1908) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln330_2_fu_1309_p2 = (($signed(sh_amt_4_reg_1950) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_963_p2 = (($signed(sh_amt_reg_1866) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln337_1_fu_1160_p2 = (($signed(tmp_10_fu_1150_p4) < $signed(9'd1)) ? 1'b1 : 1'b0);

assign icmp_ln337_2_fu_1333_p2 = (($signed(tmp_12_fu_1323_p4) < $signed(9'd1)) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_987_p2 = (($signed(tmp_8_fu_977_p4) < $signed(9'd1)) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_491_p2 = ((lcd_reg_320 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_667_p2 = ((col_reg_355 == 8'd240) ? 1'b1 : 1'b0);

assign loop_index318_cast_fu_612_p1 = loop_index318_reg_331_pp0_iter1_reg;

assign loop_index_cast_fu_653_p1 = loop_index_reg_343_pp1_iter1_reg;

assign lshr_ln331_1_fu_1173_p2 = zext_ln320_1_fu_1132_p1 >> zext_ln331_1_fu_1169_p1;

assign lshr_ln331_2_fu_1346_p2 = zext_ln320_2_fu_1305_p1 >> zext_ln331_2_fu_1342_p1;

assign lshr_ln331_fu_1000_p2 = zext_ln320_fu_959_p1 >> zext_ln331_fu_996_p1;

assign or_ln327_1_fu_1192_p2 = (icmp_ln327_1_reg_1915 | icmp_ln323_1_reg_1901);

assign or_ln327_2_fu_1365_p2 = (icmp_ln327_2_reg_1957 | icmp_ln323_2_reg_1943);

assign or_ln327_fu_1019_p2 = (icmp_ln327_reg_1873 | icmp_ln323_reg_1859);

assign or_ln329_1_fu_1221_p2 = (or_ln327_1_fu_1192_p2 | icmp_ln329_1_reg_1921);

assign or_ln329_2_fu_1394_p2 = (or_ln327_2_fu_1365_p2 | icmp_ln329_2_reg_1963);

assign or_ln329_fu_1048_p2 = (or_ln327_fu_1019_p2 | icmp_ln329_reg_1879);

assign or_ln330_1_fu_1258_p2 = (icmp_ln323_1_reg_1901 | and_ln330_3_fu_1252_p2);

assign or_ln330_2_fu_1431_p2 = (icmp_ln323_2_reg_1943 | and_ln330_5_fu_1425_p2);

assign or_ln330_fu_1085_p2 = (icmp_ln323_reg_1859 | and_ln330_1_fu_1079_p2);

assign p_Result_1_fu_951_p3 = {{1'd1}, {trunc_ln315_fu_948_p1}};

assign p_Result_3_fu_1124_p3 = {{1'd1}, {trunc_ln315_1_fu_1121_p1}};

assign p_Result_5_fu_1297_p3 = {{1'd1}, {trunc_ln315_2_fu_1294_p1}};

assign p_mid1_fu_535_p2 = (p_shl_cast_mid1_fu_519_p1 - p_shl1_cast_mid1_fu_531_p1);

assign p_shl1_cast_fu_475_p1 = p_shl1_fu_467_p3;

assign p_shl1_cast_mid1_fu_531_p1 = p_shl1_mid1_fu_523_p3;

assign p_shl1_fu_467_p3 = {{row_reg_309}, {4'd0}};

assign p_shl1_mid1_fu_523_p3 = {{add_ln32_1_fu_505_p2}, {4'd0}};

assign p_shl_cast_fu_463_p1 = p_shl_fu_455_p3;

assign p_shl_cast_mid1_fu_519_p1 = p_shl_mid1_fu_511_p3;

assign p_shl_fu_455_p3 = {{row_reg_309}, {8'd0}};

assign p_shl_mid1_fu_511_p3 = {{add_ln32_1_fu_505_p2}, {8'd0}};

assign pixel_V_fu_1548_p4 = {{{select_ln345_1_fu_1487_p3}, {select_ln345_2_fu_1514_p3}}, {select_ln345_fu_1541_p3}};

assign pixels0_V_TVALID = regslice_both_pixels0_V_U_vld_out;

assign pixels1_V_TVALID = regslice_both_pixels1_V_U_vld_out;

assign pixels2_V_TVALID = regslice_both_pixels2_V_U_vld_out;

assign pixels3_V_TVALID = regslice_both_pixels3_V_U_vld_out;

assign reg_1_fu_832_p1 = grp_fu_418_p2;

assign reg_2_fu_890_p1 = grp_fu_423_p2;

assign reg_fu_774_p1 = grp_fu_413_p2;

assign select_ln327_1_fu_1281_p3 = ((and_ln327_1_fu_1276_p2[0:0] == 1'b1) ? trunc_ln328_1_reg_1895 : select_ln330_3_fu_1263_p3);

assign select_ln327_2_fu_1454_p3 = ((and_ln327_2_fu_1449_p2[0:0] == 1'b1) ? trunc_ln328_2_reg_1937 : select_ln330_5_fu_1436_p3);

assign select_ln327_fu_1108_p3 = ((and_ln327_fu_1103_p2[0:0] == 1'b1) ? trunc_ln328_reg_1853 : select_ln330_1_fu_1090_p3);

assign select_ln32_1_fu_541_p3 = ((icmp_ln33_fu_491_p2[0:0] == 1'b1) ? p_mid1_fu_535_p2 : empty_fu_479_p2);

assign select_ln32_2_fu_549_p3 = ((icmp_ln33_fu_491_p2[0:0] == 1'b1) ? add_ln32_1_fu_505_p2 : row_reg_309);

assign select_ln32_fu_497_p3 = ((icmp_ln33_fu_491_p2[0:0] == 1'b1) ? 3'd0 : lcd_reg_320);

assign select_ln330_1_fu_1090_p3 = ((or_ln330_fu_1085_p2[0:0] == 1'b1) ? 8'd0 : select_ln337_fu_1065_p3);

assign select_ln330_2_fu_1213_p3 = ((and_ln330_2_fu_1207_p2[0:0] == 1'b1) ? trunc_ln331_1_fu_1179_p1 : 8'd0);

assign select_ln330_3_fu_1263_p3 = ((or_ln330_1_fu_1258_p2[0:0] == 1'b1) ? 8'd0 : select_ln337_1_fu_1238_p3);

assign select_ln330_4_fu_1386_p3 = ((and_ln330_4_fu_1380_p2[0:0] == 1'b1) ? trunc_ln331_2_fu_1352_p1 : 8'd0);

assign select_ln330_5_fu_1436_p3 = ((or_ln330_2_fu_1431_p2[0:0] == 1'b1) ? 8'd0 : select_ln337_2_fu_1411_p3);

assign select_ln330_fu_1040_p3 = ((and_ln330_fu_1034_p2[0:0] == 1'b1) ? trunc_ln331_fu_1006_p1 : 8'd0);

assign select_ln337_1_fu_1238_p3 = ((and_ln337_1_fu_1232_p2[0:0] == 1'b1) ? shl_ln339_1_fu_1187_p2 : select_ln330_2_fu_1213_p3);

assign select_ln337_2_fu_1411_p3 = ((and_ln337_2_fu_1405_p2[0:0] == 1'b1) ? shl_ln339_2_fu_1360_p2 : select_ln330_4_fu_1386_p3);

assign select_ln337_fu_1065_p3 = ((and_ln337_fu_1059_p2[0:0] == 1'b1) ? shl_ln339_fu_1014_p2 : select_ln330_fu_1040_p3);

assign select_ln345_1_fu_1487_p3 = ((p_Result_s_reg_1848[0:0] == 1'b1) ? tmp_fu_1467_p4 : tmp_1_fu_1477_p4);

assign select_ln345_2_fu_1514_p3 = ((p_Result_2_reg_1890[0:0] == 1'b1) ? tmp_2_fu_1494_p4 : tmp_5_fu_1504_p4);

assign select_ln345_fu_1541_p3 = ((p_Result_4_reg_1932[0:0] == 1'b1) ? tmp_3_fu_1521_p4 : tmp_4_fu_1531_p4);

assign sext_ln326_1_fu_1146_p1 = sh_amt_3_fu_1141_p2;

assign sext_ln326_1cast_fu_1183_p1 = sext_ln326_1_fu_1146_p1[7:0];

assign sext_ln326_2_fu_1319_p1 = sh_amt_5_fu_1314_p2;

assign sext_ln326_2cast_fu_1356_p1 = sext_ln326_2_fu_1319_p1[7:0];

assign sext_ln326_fu_973_p1 = sh_amt_1_fu_968_p2;

assign sext_ln326cast_fu_1010_p1 = sext_ln326_fu_973_p1[7:0];

assign sext_ln331_1_fu_1166_p1 = sh_amt_2_reg_1908;

assign sext_ln331_2_fu_1339_p1 = sh_amt_4_reg_1950;

assign sext_ln331_fu_993_p1 = sh_amt_reg_1866;

assign sext_ln34_1_fu_571_p1 = $signed(tmp_6_fu_564_p3);

assign sext_ln34_fu_590_p1 = $signed(trunc_ln1_fu_580_p4);

assign sext_ln35_fu_631_p1 = $signed(trunc_ln2_fu_621_p4);

assign sh_amt_1_fu_968_p2 = ($signed(12'd0) - $signed(sh_amt_reg_1866));

assign sh_amt_2_fu_872_p2 = (12'd1075 - zext_ln311_1_fu_858_p1);

assign sh_amt_3_fu_1141_p2 = ($signed(12'd0) - $signed(sh_amt_2_reg_1908));

assign sh_amt_4_fu_930_p2 = (12'd1075 - zext_ln311_2_fu_916_p1);

assign sh_amt_5_fu_1314_p2 = ($signed(12'd0) - $signed(sh_amt_4_reg_1950));

assign sh_amt_fu_814_p2 = (12'd1075 - zext_ln311_fu_800_p1);

assign shl_ln339_1_fu_1187_p2 = trunc_ln328_1_reg_1895 << sext_ln326_1cast_fu_1183_p1;

assign shl_ln339_2_fu_1360_p2 = trunc_ln328_2_reg_1937 << sext_ln326_2cast_fu_1356_p1;

assign shl_ln339_fu_1014_p2 = trunc_ln328_reg_1853 << sext_ln326cast_fu_1010_p1;

assign sub_ln455_1_fu_1288_p2 = (8'd0 - select_ln327_1_fu_1281_p3);

assign sub_ln455_2_fu_1461_p2 = (8'd0 - select_ln327_2_fu_1454_p3);

assign sub_ln455_fu_1115_p2 = (8'd0 - select_ln327_fu_1108_p3);

assign tmp_10_fu_1150_p4 = {{sh_amt_3_fu_1141_p2[11:3]}};

assign tmp_12_fu_1323_p4 = {{sh_amt_5_fu_1314_p2[11:3]}};

assign tmp_1_fu_1477_p4 = {{select_ln327_fu_1108_p3[7:3]}};

assign tmp_2_fu_1494_p4 = {{sub_ln455_1_fu_1288_p2[7:2]}};

assign tmp_3_fu_1521_p4 = {{sub_ln455_2_fu_1461_p2[7:3]}};

assign tmp_4_fu_1531_p4 = {{select_ln327_2_fu_1454_p3[7:3]}};

assign tmp_5_fu_1504_p4 = {{select_ln327_1_fu_1281_p3[7:2]}};

assign tmp_6_fu_564_p3 = {{grp_fu_1567_p3}, {2'd0}};

assign tmp_8_fu_977_p4 = {{sh_amt_1_fu_968_p2[11:3]}};

assign tmp_fu_1467_p4 = {{sub_ln455_fu_1115_p2[7:3]}};

assign trunc_ln1_fu_580_p4 = {{add_ln34_1_fu_575_p2[63:2]}};

assign trunc_ln2_fu_621_p4 = {{add_ln34_2_fu_617_p2[63:2]}};

assign trunc_ln306_1_fu_836_p1 = reg_1_fu_832_p1[62:0];

assign trunc_ln306_2_fu_894_p1 = reg_2_fu_890_p1[62:0];

assign trunc_ln306_fu_778_p1 = reg_fu_774_p1[62:0];

assign trunc_ln315_1_fu_1121_p1 = reg_1_reg_1885[51:0];

assign trunc_ln315_2_fu_1294_p1 = reg_2_reg_1927[51:0];

assign trunc_ln315_fu_948_p1 = reg_reg_1843[51:0];

assign trunc_ln328_1_fu_862_p1 = reg_1_fu_832_p1[7:0];

assign trunc_ln328_2_fu_920_p1 = reg_2_fu_890_p1[7:0];

assign trunc_ln328_fu_804_p1 = reg_fu_774_p1[7:0];

assign trunc_ln331_1_fu_1179_p1 = lshr_ln331_1_fu_1173_p2[7:0];

assign trunc_ln331_2_fu_1352_p1 = lshr_ln331_2_fu_1346_p2[7:0];

assign trunc_ln331_fu_1006_p1 = lshr_ln331_fu_1000_p2[7:0];

assign xor_ln323_1_fu_1271_p2 = (icmp_ln323_1_reg_1901 ^ 1'd1);

assign xor_ln323_2_fu_1444_p2 = (icmp_ln323_2_reg_1943 ^ 1'd1);

assign xor_ln323_fu_1098_p2 = (icmp_ln323_reg_1859 ^ 1'd1);

assign xor_ln327_1_fu_1196_p2 = (or_ln327_1_fu_1192_p2 ^ 1'd1);

assign xor_ln327_2_fu_1369_p2 = (or_ln327_2_fu_1365_p2 ^ 1'd1);

assign xor_ln327_fu_1023_p2 = (or_ln327_fu_1019_p2 ^ 1'd1);

assign xor_ln329_1_fu_1226_p2 = (or_ln329_1_fu_1221_p2 ^ 1'd1);

assign xor_ln329_2_fu_1399_p2 = (or_ln329_2_fu_1394_p2 ^ 1'd1);

assign xor_ln329_fu_1053_p2 = (or_ln329_fu_1048_p2 ^ 1'd1);

assign xor_ln330_1_fu_1246_p2 = (icmp_ln330_1_fu_1136_p2 ^ 1'd1);

assign xor_ln330_2_fu_1419_p2 = (icmp_ln330_2_fu_1309_p2 ^ 1'd1);

assign xor_ln330_fu_1073_p2 = (icmp_ln330_fu_963_p2 ^ 1'd1);

assign zext_ln311_1_fu_858_p1 = exp_1_fu_848_p4;

assign zext_ln311_2_fu_916_p1 = exp_2_fu_906_p4;

assign zext_ln311_fu_800_p1 = exp_fu_790_p4;

assign zext_ln320_1_fu_1132_p1 = p_Result_3_fu_1124_p3;

assign zext_ln320_2_fu_1305_p1 = p_Result_5_fu_1297_p3;

assign zext_ln320_fu_959_p1 = p_Result_1_fu_951_p3;

assign zext_ln331_1_fu_1169_p1 = $unsigned(sext_ln331_1_fu_1166_p1);

assign zext_ln331_2_fu_1342_p1 = $unsigned(sext_ln331_2_fu_1339_p1);

assign zext_ln331_fu_996_p1 = $unsigned(sext_ln331_fu_993_p1);

always @ (posedge ap_clk) begin
    select_ln32_1_reg_1600[3:0] <= 4'b0000;
    sext_ln34_1_reg_1620[1:0] <= 2'b00;
    col_cast_reg_1678[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter8_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter9_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter10_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter11_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter12_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter13_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    col_cast_reg_1678_pp2_iter14_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //Blend4
