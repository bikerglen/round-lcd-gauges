-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blend4 is
generic (
    C_M_AXI_BACKGROUND_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BACKGROUND_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BACKGROUND_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BACKGROUND_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BACKGROUND_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BACKGROUND_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BACKGROUND_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BACKGROUND_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FOREGROUND_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_FOREGROUND_ID_WIDTH : INTEGER := 1;
    C_M_AXI_FOREGROUND_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FOREGROUND_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_FOREGROUND_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FOREGROUND_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FOREGROUND_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FOREGROUND_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BACKGROUND_USER_VALUE : INTEGER := 0;
    C_M_AXI_BACKGROUND_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BACKGROUND_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_FOREGROUND_USER_VALUE : INTEGER := 0;
    C_M_AXI_FOREGROUND_PROT_VALUE : INTEGER := 0;
    C_M_AXI_FOREGROUND_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_background_AWVALID : OUT STD_LOGIC;
    m_axi_background_AWREADY : IN STD_LOGIC;
    m_axi_background_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ADDR_WIDTH-1 downto 0);
    m_axi_background_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ID_WIDTH-1 downto 0);
    m_axi_background_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_background_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_background_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_background_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_background_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_background_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_background_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_background_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_background_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_AWUSER_WIDTH-1 downto 0);
    m_axi_background_WVALID : OUT STD_LOGIC;
    m_axi_background_WREADY : IN STD_LOGIC;
    m_axi_background_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_DATA_WIDTH-1 downto 0);
    m_axi_background_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_DATA_WIDTH/8-1 downto 0);
    m_axi_background_WLAST : OUT STD_LOGIC;
    m_axi_background_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ID_WIDTH-1 downto 0);
    m_axi_background_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_WUSER_WIDTH-1 downto 0);
    m_axi_background_ARVALID : OUT STD_LOGIC;
    m_axi_background_ARREADY : IN STD_LOGIC;
    m_axi_background_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ADDR_WIDTH-1 downto 0);
    m_axi_background_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ID_WIDTH-1 downto 0);
    m_axi_background_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_background_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_background_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_background_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_background_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_background_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_background_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_background_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_background_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ARUSER_WIDTH-1 downto 0);
    m_axi_background_RVALID : IN STD_LOGIC;
    m_axi_background_RREADY : OUT STD_LOGIC;
    m_axi_background_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_DATA_WIDTH-1 downto 0);
    m_axi_background_RLAST : IN STD_LOGIC;
    m_axi_background_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ID_WIDTH-1 downto 0);
    m_axi_background_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_RUSER_WIDTH-1 downto 0);
    m_axi_background_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_background_BVALID : IN STD_LOGIC;
    m_axi_background_BREADY : OUT STD_LOGIC;
    m_axi_background_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_background_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_ID_WIDTH-1 downto 0);
    m_axi_background_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BACKGROUND_BUSER_WIDTH-1 downto 0);
    m_axi_foreground_AWVALID : OUT STD_LOGIC;
    m_axi_foreground_AWREADY : IN STD_LOGIC;
    m_axi_foreground_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ADDR_WIDTH-1 downto 0);
    m_axi_foreground_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ID_WIDTH-1 downto 0);
    m_axi_foreground_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_foreground_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_foreground_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_foreground_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_foreground_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_foreground_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_foreground_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_foreground_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_foreground_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_AWUSER_WIDTH-1 downto 0);
    m_axi_foreground_WVALID : OUT STD_LOGIC;
    m_axi_foreground_WREADY : IN STD_LOGIC;
    m_axi_foreground_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_DATA_WIDTH-1 downto 0);
    m_axi_foreground_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_DATA_WIDTH/8-1 downto 0);
    m_axi_foreground_WLAST : OUT STD_LOGIC;
    m_axi_foreground_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ID_WIDTH-1 downto 0);
    m_axi_foreground_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_WUSER_WIDTH-1 downto 0);
    m_axi_foreground_ARVALID : OUT STD_LOGIC;
    m_axi_foreground_ARREADY : IN STD_LOGIC;
    m_axi_foreground_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ADDR_WIDTH-1 downto 0);
    m_axi_foreground_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ID_WIDTH-1 downto 0);
    m_axi_foreground_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_foreground_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_foreground_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_foreground_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_foreground_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_foreground_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_foreground_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_foreground_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_foreground_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ARUSER_WIDTH-1 downto 0);
    m_axi_foreground_RVALID : IN STD_LOGIC;
    m_axi_foreground_RREADY : OUT STD_LOGIC;
    m_axi_foreground_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_DATA_WIDTH-1 downto 0);
    m_axi_foreground_RLAST : IN STD_LOGIC;
    m_axi_foreground_RID : IN STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ID_WIDTH-1 downto 0);
    m_axi_foreground_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_RUSER_WIDTH-1 downto 0);
    m_axi_foreground_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_foreground_BVALID : IN STD_LOGIC;
    m_axi_foreground_BREADY : OUT STD_LOGIC;
    m_axi_foreground_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_foreground_BID : IN STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_ID_WIDTH-1 downto 0);
    m_axi_foreground_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_FOREGROUND_BUSER_WIDTH-1 downto 0);
    pixels0_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    pixels0_V_TVALID : OUT STD_LOGIC;
    pixels0_V_TREADY : IN STD_LOGIC;
    pixels1_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    pixels1_V_TVALID : OUT STD_LOGIC;
    pixels1_V_TREADY : IN STD_LOGIC;
    pixels2_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    pixels2_V_TVALID : OUT STD_LOGIC;
    pixels2_V_TREADY : IN STD_LOGIC;
    pixels3_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    pixels3_V_TVALID : OUT STD_LOGIC;
    pixels3_V_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Blend4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blend4_Blend4,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=744001,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=6102,HLS_SYN_LUT=10693,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_3C0 : STD_LOGIC_VECTOR (9 downto 0) := "1111000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv19_E100 : STD_LOGIC_VECTOR (18 downto 0) := "0001110000100000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal background_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal foreground_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal background_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond13_reg_1636 : STD_LOGIC_VECTOR (0 downto 0);
    signal background_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal foreground_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal foreground_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond31914_reg_1656 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixels0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp2_iter29 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal empty_60_reg_1665 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter30 : STD_LOGIC := '0';
    signal pixels1_V_TDATA_blk_n : STD_LOGIC;
    signal pixels2_V_TDATA_blk_n : STD_LOGIC;
    signal pixels3_V_TDATA_blk_n : STD_LOGIC;
    signal background_AWREADY : STD_LOGIC;
    signal background_WREADY : STD_LOGIC;
    signal background_ARVALID : STD_LOGIC;
    signal background_ARREADY : STD_LOGIC;
    signal background_RVALID : STD_LOGIC;
    signal background_RREADY : STD_LOGIC;
    signal background_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal background_RLAST : STD_LOGIC;
    signal background_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal background_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal background_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal background_BVALID : STD_LOGIC;
    signal background_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal background_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal background_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal foreground_AWREADY : STD_LOGIC;
    signal foreground_WREADY : STD_LOGIC;
    signal foreground_ARVALID : STD_LOGIC;
    signal foreground_ARREADY : STD_LOGIC;
    signal foreground_RVALID : STD_LOGIC;
    signal foreground_RREADY : STD_LOGIC;
    signal foreground_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal foreground_RLAST : STD_LOGIC;
    signal foreground_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal foreground_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal foreground_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal foreground_BVALID : STD_LOGIC;
    signal foreground_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal foreground_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal foreground_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index318_reg_331 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_index318_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index_reg_343 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_index_reg_343_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state24_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal col_reg_355 : STD_LOGIC_VECTOR (7 downto 0);
    signal foreground_offset_read_reg_1576 : STD_LOGIC_VECTOR (63 downto 0);
    signal background_offset_read_reg_1581 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_449_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_reg_1586 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_pixels0_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pixels1_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pixels2_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pixels3_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal select_ln32_fu_497_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_reg_1594 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln32_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_1_fu_541_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln32_1_reg_1600 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln32_2_fu_549_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_2_reg_1605 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln34_1_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_1_reg_1620 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal background_addr_reg_1625 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_55_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_55_reg_1631 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond13_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond13_reg_1636_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal background_addr_read_reg_1640 : STD_LOGIC_VECTOR (31 downto 0);
    signal foreground_addr_reg_1645 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal empty_58_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_58_reg_1651 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond31914_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond31914_reg_1656_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal foreground_addr_read_reg_1660 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_60_fu_658_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln36_fu_661_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state28_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state46_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state47_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state48_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state49_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state50_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter25 : BOOLEAN;
    signal ap_block_state54_pp2_stage0_iter26 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter27 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter28 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter29 : BOOLEAN;
    signal ap_block_state57_io : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter30 : BOOLEAN;
    signal ap_block_state58_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln36_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_cast_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal col_cast_reg_1678_pp2_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal fgr_V_reg_1688 : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgr_V_reg_1688_pp2_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693 : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgg_V_reg_1693_pp2_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698 : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal fgb_V_reg_1698_pp2_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713 : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_reg_1713_pp2_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_op_assign_reg_1761 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_1768 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i2_reg_1773 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i4_reg_1778 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i1_reg_1783 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i3_reg_1788 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i5_reg_1793 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i2_reg_1798 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i4_reg_1803 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i1_reg_1813 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i3_reg_1818 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i5_reg_1823 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_reg_1843 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_1848 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln328_fu_804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_reg_1853 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln323_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_1859 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_814_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1866 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln327_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_1873 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_1879 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1_reg_1885 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_reg_1890 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln328_1_fu_862_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_1_reg_1895 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln323_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_1_reg_1901 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_872_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_reg_1908 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln327_1_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_1_reg_1915 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_1_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_1_reg_1921 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_2_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_2_reg_1927 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_reg_1932 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln328_2_fu_920_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_2_reg_1937 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln323_2_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_2_reg_1943 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_4_fu_930_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_4_reg_1950 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln327_2_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_2_reg_1957 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_2_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_2_reg_1963 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_V_fu_1548_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_fu_1562_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal fgLineBuff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fgLineBuff_ce0 : STD_LOGIC;
    signal fgLineBuff_we0 : STD_LOGIC;
    signal fgLineBuff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bgLineBuff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bgLineBuff_ce0 : STD_LOGIC;
    signal bgLineBuff_we0 : STD_LOGIC;
    signal bgLineBuff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_298 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_reg_309 : STD_LOGIC_VECTOR (7 downto 0);
    signal lcd_reg_320 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_loop_index318_phi_fu_335_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_loop_index_phi_fu_347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_index318_cast_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_455_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_fu_467_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_463_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_cast_fu_475_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln33_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_1_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_511_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_mid1_fu_523_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_mid1_fu_519_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_cast_mid1_fu_531_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_mid1_fu_535_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_479_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1567_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_6_fu_564_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln34_1_fu_575_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_580_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln34_2_fu_617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_621_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal fga_V_fu_708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bgr_V_fu_717_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bgg_V_fu_727_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bgb_V_fu_737_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_fu_790_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln306_fu_778_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_fu_800_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_1_fu_848_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln306_1_fu_836_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_1_fu_858_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_2_fu_906_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln306_2_fu_894_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_2_fu_916_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln315_fu_948_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_951_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sh_amt_1_fu_968_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_977_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln331_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_fu_959_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_fu_996_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_fu_1000_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln326_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln326cast_fu_1010_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln327_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln327_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln329_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_fu_1006_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln329_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln337_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln339_fu_1014_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_fu_1040_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_1_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln337_fu_1065_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln330_1_fu_1090_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln327_fu_1108_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln315_1_fu_1121_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_3_fu_1124_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sh_amt_3_fu_1141_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_1150_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln331_1_fu_1166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_1_fu_1132_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_1_fu_1169_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_1_fu_1173_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln326_1_fu_1146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln326_1cast_fu_1183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln327_1_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln327_1_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln329_1_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_1_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_2_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_1_fu_1179_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_1_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_1_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln329_1_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln337_1_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln339_1_fu_1187_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_2_fu_1213_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_1_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_3_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_1_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln337_1_fu_1238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_1_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln330_3_fu_1263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln327_1_fu_1281_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln315_2_fu_1294_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_5_fu_1297_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sh_amt_5_fu_1314_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_1323_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln331_2_fu_1339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_2_fu_1305_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_2_fu_1342_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_2_fu_1346_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln326_2_fu_1319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln326_2cast_fu_1356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln327_2_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln327_2_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln329_2_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_2_fu_1309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_4_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_2_fu_1352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_2_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_2_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln329_2_fu_1399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln337_2_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln339_2_fu_1360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_4_fu_1386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_2_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_5_fu_1425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_2_fu_1431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln337_2_fu_1411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_2_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_2_fu_1449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln330_5_fu_1436_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln327_2_fu_1454_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln455_fu_1115_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_1467_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_1477_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln455_1_fu_1288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1494_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_1504_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln455_2_fu_1461_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_1521_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_1531_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln345_1_fu_1487_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln345_2_fu_1514_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln345_fu_1541_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1567_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1567_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_366_ce : STD_LOGIC;
    signal grp_fu_370_ce : STD_LOGIC;
    signal grp_fu_374_ce : STD_LOGIC;
    signal grp_fu_378_ce : STD_LOGIC;
    signal grp_fu_383_ce : STD_LOGIC;
    signal grp_fu_386_ce : STD_LOGIC;
    signal grp_fu_389_ce : STD_LOGIC;
    signal grp_fu_392_ce : STD_LOGIC;
    signal grp_fu_395_ce : STD_LOGIC;
    signal grp_fu_398_ce : STD_LOGIC;
    signal grp_fu_401_ce : STD_LOGIC;
    signal grp_fu_404_ce : STD_LOGIC;
    signal grp_fu_407_ce : STD_LOGIC;
    signal grp_fu_413_ce : STD_LOGIC;
    signal grp_fu_418_ce : STD_LOGIC;
    signal grp_fu_423_ce : STD_LOGIC;
    signal grp_fu_428_ce : STD_LOGIC;
    signal grp_fu_432_ce : STD_LOGIC;
    signal grp_fu_436_ce : STD_LOGIC;
    signal grp_fu_440_ce : STD_LOGIC;
    signal grp_fu_443_ce : STD_LOGIC;
    signal grp_fu_446_ce : STD_LOGIC;
    signal grp_fu_1567_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal pixels0_V_TVALID_int_regslice : STD_LOGIC;
    signal pixels0_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pixels0_V_U_vld_out : STD_LOGIC;
    signal pixels1_V_TVALID_int_regslice : STD_LOGIC;
    signal pixels1_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pixels1_V_U_vld_out : STD_LOGIC;
    signal pixels2_V_TVALID_int_regslice : STD_LOGIC;
    signal pixels2_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pixels2_V_U_vld_out : STD_LOGIC;
    signal pixels3_V_TVALID_int_regslice : STD_LOGIC;
    signal pixels3_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pixels3_V_U_vld_out : STD_LOGIC;
    signal grp_fu_1567_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component Blend4_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blend4_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blend4_uitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blend4_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Blend4_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Blend4_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Blend4_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Blend4_uitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Blend4_mac_muladd_3ns_17ns_17s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Blend4_fgLineBuff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Blend4_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        background_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        foreground_offset : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Blend4_background_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Blend4_foreground_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Blend4_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component Blend4_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        background_offset => background_offset,
        foreground_offset => foreground_offset);

    background_m_axi_U : component Blend4_background_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BACKGROUND_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BACKGROUND_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BACKGROUND_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BACKGROUND_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BACKGROUND_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BACKGROUND_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BACKGROUND_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BACKGROUND_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BACKGROUND_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BACKGROUND_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BACKGROUND_CACHE_VALUE)
    port map (
        AWVALID => m_axi_background_AWVALID,
        AWREADY => m_axi_background_AWREADY,
        AWADDR => m_axi_background_AWADDR,
        AWID => m_axi_background_AWID,
        AWLEN => m_axi_background_AWLEN,
        AWSIZE => m_axi_background_AWSIZE,
        AWBURST => m_axi_background_AWBURST,
        AWLOCK => m_axi_background_AWLOCK,
        AWCACHE => m_axi_background_AWCACHE,
        AWPROT => m_axi_background_AWPROT,
        AWQOS => m_axi_background_AWQOS,
        AWREGION => m_axi_background_AWREGION,
        AWUSER => m_axi_background_AWUSER,
        WVALID => m_axi_background_WVALID,
        WREADY => m_axi_background_WREADY,
        WDATA => m_axi_background_WDATA,
        WSTRB => m_axi_background_WSTRB,
        WLAST => m_axi_background_WLAST,
        WID => m_axi_background_WID,
        WUSER => m_axi_background_WUSER,
        ARVALID => m_axi_background_ARVALID,
        ARREADY => m_axi_background_ARREADY,
        ARADDR => m_axi_background_ARADDR,
        ARID => m_axi_background_ARID,
        ARLEN => m_axi_background_ARLEN,
        ARSIZE => m_axi_background_ARSIZE,
        ARBURST => m_axi_background_ARBURST,
        ARLOCK => m_axi_background_ARLOCK,
        ARCACHE => m_axi_background_ARCACHE,
        ARPROT => m_axi_background_ARPROT,
        ARQOS => m_axi_background_ARQOS,
        ARREGION => m_axi_background_ARREGION,
        ARUSER => m_axi_background_ARUSER,
        RVALID => m_axi_background_RVALID,
        RREADY => m_axi_background_RREADY,
        RDATA => m_axi_background_RDATA,
        RLAST => m_axi_background_RLAST,
        RID => m_axi_background_RID,
        RUSER => m_axi_background_RUSER,
        RRESP => m_axi_background_RRESP,
        BVALID => m_axi_background_BVALID,
        BREADY => m_axi_background_BREADY,
        BRESP => m_axi_background_BRESP,
        BID => m_axi_background_BID,
        BUSER => m_axi_background_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => background_ARVALID,
        I_ARREADY => background_ARREADY,
        I_ARADDR => background_addr_reg_1625,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_F0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => background_RVALID,
        I_RREADY => background_RREADY,
        I_RDATA => background_RDATA,
        I_RID => background_RID,
        I_RUSER => background_RUSER,
        I_RRESP => background_RRESP,
        I_RLAST => background_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => background_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => background_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => background_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => background_BRESP,
        I_BID => background_BID,
        I_BUSER => background_BUSER);

    foreground_m_axi_U : component Blend4_foreground_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_FOREGROUND_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_FOREGROUND_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_FOREGROUND_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_FOREGROUND_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_FOREGROUND_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_FOREGROUND_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_FOREGROUND_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_FOREGROUND_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_FOREGROUND_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_FOREGROUND_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_FOREGROUND_CACHE_VALUE)
    port map (
        AWVALID => m_axi_foreground_AWVALID,
        AWREADY => m_axi_foreground_AWREADY,
        AWADDR => m_axi_foreground_AWADDR,
        AWID => m_axi_foreground_AWID,
        AWLEN => m_axi_foreground_AWLEN,
        AWSIZE => m_axi_foreground_AWSIZE,
        AWBURST => m_axi_foreground_AWBURST,
        AWLOCK => m_axi_foreground_AWLOCK,
        AWCACHE => m_axi_foreground_AWCACHE,
        AWPROT => m_axi_foreground_AWPROT,
        AWQOS => m_axi_foreground_AWQOS,
        AWREGION => m_axi_foreground_AWREGION,
        AWUSER => m_axi_foreground_AWUSER,
        WVALID => m_axi_foreground_WVALID,
        WREADY => m_axi_foreground_WREADY,
        WDATA => m_axi_foreground_WDATA,
        WSTRB => m_axi_foreground_WSTRB,
        WLAST => m_axi_foreground_WLAST,
        WID => m_axi_foreground_WID,
        WUSER => m_axi_foreground_WUSER,
        ARVALID => m_axi_foreground_ARVALID,
        ARREADY => m_axi_foreground_ARREADY,
        ARADDR => m_axi_foreground_ARADDR,
        ARID => m_axi_foreground_ARID,
        ARLEN => m_axi_foreground_ARLEN,
        ARSIZE => m_axi_foreground_ARSIZE,
        ARBURST => m_axi_foreground_ARBURST,
        ARLOCK => m_axi_foreground_ARLOCK,
        ARCACHE => m_axi_foreground_ARCACHE,
        ARPROT => m_axi_foreground_ARPROT,
        ARQOS => m_axi_foreground_ARQOS,
        ARREGION => m_axi_foreground_ARREGION,
        ARUSER => m_axi_foreground_ARUSER,
        RVALID => m_axi_foreground_RVALID,
        RREADY => m_axi_foreground_RREADY,
        RDATA => m_axi_foreground_RDATA,
        RLAST => m_axi_foreground_RLAST,
        RID => m_axi_foreground_RID,
        RUSER => m_axi_foreground_RUSER,
        RRESP => m_axi_foreground_RRESP,
        BVALID => m_axi_foreground_BVALID,
        BREADY => m_axi_foreground_BREADY,
        BRESP => m_axi_foreground_BRESP,
        BID => m_axi_foreground_BID,
        BUSER => m_axi_foreground_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => foreground_ARVALID,
        I_ARREADY => foreground_ARREADY,
        I_ARADDR => foreground_addr_reg_1645,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_F0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => foreground_RVALID,
        I_RREADY => foreground_RREADY,
        I_RDATA => foreground_RDATA,
        I_RID => foreground_RID,
        I_RUSER => foreground_RUSER,
        I_RRESP => foreground_RRESP,
        I_RLAST => foreground_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => foreground_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => foreground_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => foreground_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => foreground_BRESP,
        I_BID => foreground_BID,
        I_BUSER => foreground_BUSER);

    fgLineBuff_U : component Blend4_fgLineBuff
    generic map (
        DataWidth => 32,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fgLineBuff_address0,
        ce0 => fgLineBuff_ce0,
        we0 => fgLineBuff_we0,
        d0 => foreground_addr_read_reg_1660,
        q0 => fgLineBuff_q0);

    bgLineBuff_U : component Blend4_fgLineBuff
    generic map (
        DataWidth => 32,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bgLineBuff_address0,
        ce0 => bgLineBuff_ce0,
        we0 => bgLineBuff_we0,
        d0 => background_addr_read_reg_1640,
        q0 => bgLineBuff_q0);

    fmul_32ns_32ns_32_2_max_dsp_1_U1 : component Blend4_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => alpha_reg_1713_pp2_iter20_reg,
        din1 => conv_i1_reg_1783,
        ce => grp_fu_366_ce,
        dout => grp_fu_366_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U2 : component Blend4_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => alpha_reg_1713_pp2_iter20_reg,
        din1 => conv_i3_reg_1788,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U3 : component Blend4_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => alpha_reg_1713_pp2_iter20_reg,
        din1 => conv_i5_reg_1793,
        ce => grp_fu_374_ce,
        dout => grp_fu_374_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U4 : component Blend4_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_reg_1708,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_378_ce,
        dout => grp_fu_378_p2);

    uitofp_32ns_32_4_no_dsp_1_U5 : component Blend4_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_383_p0,
        ce => grp_fu_383_ce,
        dout => grp_fu_383_p1);

    uitofp_32ns_32_4_no_dsp_1_U6 : component Blend4_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_386_p0,
        ce => grp_fu_386_ce,
        dout => grp_fu_386_p1);

    uitofp_32ns_32_4_no_dsp_1_U7 : component Blend4_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_389_p0,
        ce => grp_fu_389_ce,
        dout => grp_fu_389_p1);

    uitofp_32ns_32_4_no_dsp_1_U8 : component Blend4_uitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_392_p0,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p1);

    fpext_32ns_64_2_no_dsp_1_U9 : component Blend4_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => alpha_reg_1713,
        ce => grp_fu_395_ce,
        dout => grp_fu_395_p1);

    fpext_32ns_64_2_no_dsp_1_U10 : component Blend4_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i2_reg_1798,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p1);

    fpext_32ns_64_2_no_dsp_1_U11 : component Blend4_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i4_reg_1803,
        ce => grp_fu_401_ce,
        dout => grp_fu_401_p1);

    fpext_32ns_64_2_no_dsp_1_U12 : component Blend4_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i_reg_1808,
        ce => grp_fu_404_ce,
        dout => grp_fu_404_p1);

    dsub_64ns_64ns_64_5_full_dsp_1_U13 : component Blend4_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => grp_fu_395_p1,
        ce => grp_fu_407_ce,
        dout => grp_fu_407_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U14 : component Blend4_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i1_reg_1813,
        din1 => grp_fu_398_p1,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U15 : component Blend4_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i3_reg_1818,
        din1 => grp_fu_401_p1,
        ce => grp_fu_418_ce,
        dout => grp_fu_418_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U16 : component Blend4_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i5_reg_1823,
        din1 => grp_fu_404_p1,
        ce => grp_fu_423_ce,
        dout => grp_fu_423_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U17 : component Blend4_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_1761,
        din1 => conv_i_reg_1768,
        ce => grp_fu_428_ce,
        dout => grp_fu_428_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U18 : component Blend4_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_1761,
        din1 => conv_i2_reg_1773,
        ce => grp_fu_432_ce,
        dout => grp_fu_432_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U19 : component Blend4_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_1761,
        din1 => conv_i4_reg_1778,
        ce => grp_fu_436_ce,
        dout => grp_fu_436_p2);

    uitodp_32ns_64_4_no_dsp_1_U20 : component Blend4_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_440_p0,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p1);

    uitodp_32ns_64_4_no_dsp_1_U21 : component Blend4_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p1);

    uitodp_32ns_64_4_no_dsp_1_U22 : component Blend4_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_446_p0,
        ce => grp_fu_446_ce,
        dout => grp_fu_446_p1);

    mac_muladd_3ns_17ns_17s_19_4_1_U23 : component Blend4_mac_muladd_3ns_17ns_17s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 17,
        din2_WIDTH => 17,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1567_p0,
        din1 => grp_fu_1567_p1,
        din2 => select_ln32_1_reg_1600,
        ce => grp_fu_1567_ce,
        dout => grp_fu_1567_p3);

    regslice_both_pixels0_V_U : component Blend4_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_V_fu_1548_p4,
        vld_in => pixels0_V_TVALID_int_regslice,
        ack_in => pixels0_V_TREADY_int_regslice,
        data_out => pixels0_V_TDATA,
        vld_out => regslice_both_pixels0_V_U_vld_out,
        ack_out => pixels0_V_TREADY,
        apdone_blk => regslice_both_pixels0_V_U_apdone_blk);

    regslice_both_pixels1_V_U : component Blend4_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_V_fu_1548_p4,
        vld_in => pixels1_V_TVALID_int_regslice,
        ack_in => pixels1_V_TREADY_int_regslice,
        data_out => pixels1_V_TDATA,
        vld_out => regslice_both_pixels1_V_U_vld_out,
        ack_out => pixels1_V_TREADY,
        apdone_blk => regslice_both_pixels1_V_U_apdone_blk);

    regslice_both_pixels2_V_U : component Blend4_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_V_fu_1548_p4,
        vld_in => pixels2_V_TVALID_int_regslice,
        ack_in => pixels2_V_TREADY_int_regslice,
        data_out => pixels2_V_TDATA,
        vld_out => regslice_both_pixels2_V_U_vld_out,
        ack_out => pixels2_V_TREADY,
        apdone_blk => regslice_both_pixels2_V_U_apdone_blk);

    regslice_both_pixels3_V_U : component Blend4_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_V_fu_1548_p4,
        vld_in => pixels3_V_TVALID_int_regslice,
        ack_in => pixels3_V_TREADY_int_regslice,
        data_out => pixels3_V_TDATA,
        vld_out => regslice_both_pixels3_V_U_vld_out,
        ack_out => pixels3_V_TREADY,
        apdone_blk => regslice_both_pixels3_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state24)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state24);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state28)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp2_iter30 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    col_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_667_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                col_reg_355 <= add_ln36_fu_661_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                col_reg_355 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                indvar_flatten_reg_298 <= add_ln32_reg_1586;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_298 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    lcd_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                lcd_reg_320 <= add_ln33_fu_1562_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lcd_reg_320 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    loop_index318_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                loop_index318_reg_331 <= empty_55_reg_1631;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                loop_index318_reg_331 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    loop_index_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                loop_index_reg_343 <= empty_58_reg_1651;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                loop_index_reg_343 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    row_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                row_reg_309 <= select_ln32_2_reg_1605;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_309 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln32_reg_1586 <= add_ln32_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                alpha_reg_1713 <= grp_fu_378_p2;
                alpha_reg_1713_pp2_iter14_reg <= alpha_reg_1713;
                alpha_reg_1713_pp2_iter15_reg <= alpha_reg_1713_pp2_iter14_reg;
                alpha_reg_1713_pp2_iter16_reg <= alpha_reg_1713_pp2_iter15_reg;
                alpha_reg_1713_pp2_iter17_reg <= alpha_reg_1713_pp2_iter16_reg;
                alpha_reg_1713_pp2_iter18_reg <= alpha_reg_1713_pp2_iter17_reg;
                alpha_reg_1713_pp2_iter19_reg <= alpha_reg_1713_pp2_iter18_reg;
                alpha_reg_1713_pp2_iter20_reg <= alpha_reg_1713_pp2_iter19_reg;
                    col_cast_reg_1678_pp2_iter10_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter9_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter11_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter10_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter12_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter11_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter13_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter12_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter14_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter13_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter2_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter1_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter3_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter2_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter4_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter3_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter5_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter4_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter6_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter5_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter7_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter6_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter8_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter7_reg(7 downto 0);
                    col_cast_reg_1678_pp2_iter9_reg(7 downto 0) <= col_cast_reg_1678_pp2_iter8_reg(7 downto 0);
                conv_i1_reg_1783 <= grp_fu_386_p1;
                conv_i2_reg_1773 <= grp_fu_443_p1;
                conv_i3_reg_1788 <= grp_fu_389_p1;
                conv_i4_reg_1778 <= grp_fu_446_p1;
                conv_i5_reg_1793 <= grp_fu_392_p1;
                conv_i_reg_1768 <= grp_fu_440_p1;
                conv_reg_1708 <= grp_fu_383_p1;
                fgb_V_reg_1698_pp2_iter10_reg <= fgb_V_reg_1698_pp2_iter9_reg;
                fgb_V_reg_1698_pp2_iter11_reg <= fgb_V_reg_1698_pp2_iter10_reg;
                fgb_V_reg_1698_pp2_iter12_reg <= fgb_V_reg_1698_pp2_iter11_reg;
                fgb_V_reg_1698_pp2_iter13_reg <= fgb_V_reg_1698_pp2_iter12_reg;
                fgb_V_reg_1698_pp2_iter14_reg <= fgb_V_reg_1698_pp2_iter13_reg;
                fgb_V_reg_1698_pp2_iter15_reg <= fgb_V_reg_1698_pp2_iter14_reg;
                fgb_V_reg_1698_pp2_iter16_reg <= fgb_V_reg_1698_pp2_iter15_reg;
                fgb_V_reg_1698_pp2_iter2_reg <= fgb_V_reg_1698;
                fgb_V_reg_1698_pp2_iter3_reg <= fgb_V_reg_1698_pp2_iter2_reg;
                fgb_V_reg_1698_pp2_iter4_reg <= fgb_V_reg_1698_pp2_iter3_reg;
                fgb_V_reg_1698_pp2_iter5_reg <= fgb_V_reg_1698_pp2_iter4_reg;
                fgb_V_reg_1698_pp2_iter6_reg <= fgb_V_reg_1698_pp2_iter5_reg;
                fgb_V_reg_1698_pp2_iter7_reg <= fgb_V_reg_1698_pp2_iter6_reg;
                fgb_V_reg_1698_pp2_iter8_reg <= fgb_V_reg_1698_pp2_iter7_reg;
                fgb_V_reg_1698_pp2_iter9_reg <= fgb_V_reg_1698_pp2_iter8_reg;
                fgg_V_reg_1693_pp2_iter10_reg <= fgg_V_reg_1693_pp2_iter9_reg;
                fgg_V_reg_1693_pp2_iter11_reg <= fgg_V_reg_1693_pp2_iter10_reg;
                fgg_V_reg_1693_pp2_iter12_reg <= fgg_V_reg_1693_pp2_iter11_reg;
                fgg_V_reg_1693_pp2_iter13_reg <= fgg_V_reg_1693_pp2_iter12_reg;
                fgg_V_reg_1693_pp2_iter14_reg <= fgg_V_reg_1693_pp2_iter13_reg;
                fgg_V_reg_1693_pp2_iter15_reg <= fgg_V_reg_1693_pp2_iter14_reg;
                fgg_V_reg_1693_pp2_iter16_reg <= fgg_V_reg_1693_pp2_iter15_reg;
                fgg_V_reg_1693_pp2_iter2_reg <= fgg_V_reg_1693;
                fgg_V_reg_1693_pp2_iter3_reg <= fgg_V_reg_1693_pp2_iter2_reg;
                fgg_V_reg_1693_pp2_iter4_reg <= fgg_V_reg_1693_pp2_iter3_reg;
                fgg_V_reg_1693_pp2_iter5_reg <= fgg_V_reg_1693_pp2_iter4_reg;
                fgg_V_reg_1693_pp2_iter6_reg <= fgg_V_reg_1693_pp2_iter5_reg;
                fgg_V_reg_1693_pp2_iter7_reg <= fgg_V_reg_1693_pp2_iter6_reg;
                fgg_V_reg_1693_pp2_iter8_reg <= fgg_V_reg_1693_pp2_iter7_reg;
                fgg_V_reg_1693_pp2_iter9_reg <= fgg_V_reg_1693_pp2_iter8_reg;
                fgr_V_reg_1688_pp2_iter10_reg <= fgr_V_reg_1688_pp2_iter9_reg;
                fgr_V_reg_1688_pp2_iter11_reg <= fgr_V_reg_1688_pp2_iter10_reg;
                fgr_V_reg_1688_pp2_iter12_reg <= fgr_V_reg_1688_pp2_iter11_reg;
                fgr_V_reg_1688_pp2_iter13_reg <= fgr_V_reg_1688_pp2_iter12_reg;
                fgr_V_reg_1688_pp2_iter14_reg <= fgr_V_reg_1688_pp2_iter13_reg;
                fgr_V_reg_1688_pp2_iter15_reg <= fgr_V_reg_1688_pp2_iter14_reg;
                fgr_V_reg_1688_pp2_iter16_reg <= fgr_V_reg_1688_pp2_iter15_reg;
                fgr_V_reg_1688_pp2_iter2_reg <= fgr_V_reg_1688;
                fgr_V_reg_1688_pp2_iter3_reg <= fgr_V_reg_1688_pp2_iter2_reg;
                fgr_V_reg_1688_pp2_iter4_reg <= fgr_V_reg_1688_pp2_iter3_reg;
                fgr_V_reg_1688_pp2_iter5_reg <= fgr_V_reg_1688_pp2_iter4_reg;
                fgr_V_reg_1688_pp2_iter6_reg <= fgr_V_reg_1688_pp2_iter5_reg;
                fgr_V_reg_1688_pp2_iter7_reg <= fgr_V_reg_1688_pp2_iter6_reg;
                fgr_V_reg_1688_pp2_iter8_reg <= fgr_V_reg_1688_pp2_iter7_reg;
                fgr_V_reg_1688_pp2_iter9_reg <= fgr_V_reg_1688_pp2_iter8_reg;
                i_op_assign_reg_1761 <= grp_fu_407_p2;
                icmp_ln323_1_reg_1901 <= icmp_ln323_1_fu_866_p2;
                icmp_ln323_2_reg_1943 <= icmp_ln323_2_fu_924_p2;
                icmp_ln323_reg_1859 <= icmp_ln323_fu_808_p2;
                icmp_ln327_1_reg_1915 <= icmp_ln327_1_fu_878_p2;
                icmp_ln327_2_reg_1957 <= icmp_ln327_2_fu_936_p2;
                icmp_ln327_reg_1873 <= icmp_ln327_fu_820_p2;
                icmp_ln329_1_reg_1921 <= icmp_ln329_1_fu_884_p2;
                icmp_ln329_2_reg_1963 <= icmp_ln329_2_fu_942_p2;
                icmp_ln329_reg_1879 <= icmp_ln329_fu_826_p2;
                mul_i1_reg_1813 <= grp_fu_428_p2;
                mul_i2_reg_1798 <= grp_fu_366_p2;
                mul_i3_reg_1818 <= grp_fu_432_p2;
                mul_i4_reg_1803 <= grp_fu_370_p2;
                mul_i5_reg_1823 <= grp_fu_436_p2;
                mul_i_reg_1808 <= grp_fu_374_p2;
                p_Result_2_reg_1890 <= reg_1_fu_832_p1(63 downto 63);
                p_Result_4_reg_1932 <= reg_2_fu_890_p1(63 downto 63);
                p_Result_s_reg_1848 <= reg_fu_774_p1(63 downto 63);
                reg_1_reg_1885 <= reg_1_fu_832_p1;
                reg_2_reg_1927 <= reg_2_fu_890_p1;
                reg_reg_1843 <= reg_fu_774_p1;
                sh_amt_2_reg_1908 <= sh_amt_2_fu_872_p2;
                sh_amt_4_reg_1950 <= sh_amt_4_fu_930_p2;
                sh_amt_reg_1866 <= sh_amt_fu_814_p2;
                trunc_ln328_1_reg_1895 <= trunc_ln328_1_fu_862_p1;
                trunc_ln328_2_reg_1937 <= trunc_ln328_2_fu_920_p1;
                trunc_ln328_reg_1853 <= trunc_ln328_fu_804_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                background_addr_read_reg_1640 <= background_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                background_addr_reg_1625 <= sext_ln34_fu_590_p1;
                    sext_ln34_1_reg_1620(63 downto 2) <= sext_ln34_1_fu_571_p1(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                background_offset_read_reg_1581 <= background_offset;
                foreground_offset_read_reg_1576 <= foreground_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_667_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    col_cast_reg_1678(7 downto 0) <= col_cast_fu_673_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    col_cast_reg_1678_pp2_iter1_reg(7 downto 0) <= col_cast_reg_1678(7 downto 0);
                fgb_V_reg_1698 <= fgLineBuff_q0(15 downto 8);
                fgg_V_reg_1693 <= fgLineBuff_q0(23 downto 16);
                fgr_V_reg_1688 <= fgLineBuff_q0(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_55_reg_1631 <= empty_55_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                empty_58_reg_1651 <= empty_58_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                empty_60_reg_1665 <= empty_60_fu_658_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond13_reg_1636 <= exitcond13_fu_606_p2;
                exitcond13_reg_1636_pp0_iter1_reg <= exitcond13_reg_1636;
                loop_index318_reg_331_pp0_iter1_reg <= loop_index318_reg_331;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond31914_reg_1656 <= exitcond31914_fu_647_p2;
                exitcond31914_reg_1656_pp1_iter1_reg <= exitcond31914_reg_1656;
                loop_index_reg_343_pp1_iter1_reg <= loop_index_reg_343;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                foreground_addr_read_reg_1660 <= foreground_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                foreground_addr_reg_1645 <= sext_ln35_fu_631_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    select_ln32_1_reg_1600(16 downto 4) <= select_ln32_1_fu_541_p3(16 downto 4);
                select_ln32_reg_1594 <= select_ln32_fu_497_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln32_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln32_2_reg_1605 <= select_ln32_2_fu_549_p3;
            end if;
        end if;
    end process;
    select_ln32_1_reg_1600(3 downto 0) <= "0000";
    sext_ln34_1_reg_1620(1 downto 0) <= "00";
    col_cast_reg_1678(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter8_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter9_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter10_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter11_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    col_cast_reg_1678_pp2_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter29, ap_enable_reg_pp2_iter30, background_ARREADY, foreground_ARREADY, ap_CS_fsm_state2, regslice_both_pixels0_V_U_apdone_blk, regslice_both_pixels1_V_U_apdone_blk, regslice_both_pixels2_V_U_apdone_blk, regslice_both_pixels3_V_U_apdone_blk, icmp_ln32_fu_485_p2, ap_enable_reg_pp0_iter0, exitcond13_fu_606_p2, ap_enable_reg_pp1_iter0, exitcond31914_fu_647_p2, ap_enable_reg_pp2_iter0, icmp_ln36_fu_667_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln32_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln32_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((background_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond13_fu_606_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond13_fu_606_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((foreground_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond31914_fu_647_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((exitcond31914_fu_647_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln36_fu_667_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (ap_enable_reg_pp2_iter29 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln36_fu_667_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (ap_enable_reg_pp2_iter29 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_1_fu_505_p2 <= std_logic_vector(unsigned(row_reg_309) + unsigned(ap_const_lv8_1));
    add_ln32_fu_449_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_298) + unsigned(ap_const_lv10_1));
    add_ln33_fu_1562_p2 <= std_logic_vector(unsigned(select_ln32_reg_1594) + unsigned(ap_const_lv3_1));
    add_ln34_1_fu_575_p2 <= std_logic_vector(signed(sext_ln34_1_fu_571_p1) + signed(background_offset_read_reg_1581));
    add_ln34_2_fu_617_p2 <= std_logic_vector(signed(sext_ln34_1_reg_1620) + signed(foreground_offset_read_reg_1576));
    add_ln36_fu_661_p2 <= std_logic_vector(unsigned(col_reg_355) + unsigned(ap_const_lv8_1));
    and_ln327_1_fu_1276_p2 <= (xor_ln323_1_fu_1271_p2 and icmp_ln327_1_reg_1915);
    and_ln327_2_fu_1449_p2 <= (xor_ln323_2_fu_1444_p2 and icmp_ln327_2_reg_1957);
    and_ln327_fu_1103_p2 <= (xor_ln323_fu_1098_p2 and icmp_ln327_reg_1873);
    and_ln329_1_fu_1202_p2 <= (xor_ln327_1_fu_1196_p2 and icmp_ln329_1_reg_1921);
    and_ln329_2_fu_1375_p2 <= (xor_ln327_2_fu_1369_p2 and icmp_ln329_2_reg_1963);
    and_ln329_fu_1029_p2 <= (xor_ln327_fu_1023_p2 and icmp_ln329_reg_1879);
    and_ln330_1_fu_1079_p2 <= (xor_ln330_fu_1073_p2 and and_ln329_fu_1029_p2);
    and_ln330_2_fu_1207_p2 <= (icmp_ln330_1_fu_1136_p2 and and_ln329_1_fu_1202_p2);
    and_ln330_3_fu_1252_p2 <= (xor_ln330_1_fu_1246_p2 and and_ln329_1_fu_1202_p2);
    and_ln330_4_fu_1380_p2 <= (icmp_ln330_2_fu_1309_p2 and and_ln329_2_fu_1375_p2);
    and_ln330_5_fu_1425_p2 <= (xor_ln330_2_fu_1419_p2 and and_ln329_2_fu_1375_p2);
    and_ln330_fu_1034_p2 <= (icmp_ln330_fu_963_p2 and and_ln329_fu_1029_p2);
    and_ln337_1_fu_1232_p2 <= (xor_ln329_1_fu_1226_p2 and icmp_ln337_1_fu_1160_p2);
    and_ln337_2_fu_1405_p2 <= (xor_ln329_2_fu_1399_p2 and icmp_ln337_2_fu_1333_p2);
    and_ln337_fu_1059_p2 <= (xor_ln329_fu_1053_p2 and icmp_ln337_fu_987_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state59 <= ap_CS_fsm(24);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond13_reg_1636, background_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((background_RVALID = ap_const_logic_0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond13_reg_1636, background_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((background_RVALID = ap_const_logic_0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond31914_reg_1656, foreground_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((foreground_RVALID = ap_const_logic_0) and (exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond31914_reg_1656, foreground_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((foreground_RVALID = ap_const_logic_0) and (exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_enable_reg_pp2_iter30, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_01001 <= (((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_enable_reg_pp2_iter30, ap_block_state57_io, ap_block_state58_io, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state58_io) or ((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp2_iter29 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state57_io) or ((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_enable_reg_pp2_iter30, ap_block_state57_io, ap_block_state58_io, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state58_io) or ((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp2_iter29 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state57_io) or ((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)))));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(exitcond13_reg_1636, background_RVALID)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((background_RVALID = ap_const_logic_0) and (exitcond13_reg_1636 = ap_const_lv1_0));
    end process;

        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(regslice_both_pixels0_V_U_apdone_blk, regslice_both_pixels1_V_U_apdone_blk, regslice_both_pixels2_V_U_apdone_blk, regslice_both_pixels3_V_U_apdone_blk)
    begin
                ap_block_state2 <= ((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state24_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp1_stage0_iter1_assign_proc : process(exitcond31914_reg_1656, foreground_RVALID)
    begin
                ap_block_state25_pp1_stage0_iter1 <= ((foreground_RVALID = ap_const_logic_0) and (exitcond31914_reg_1656 = ap_const_lv1_0));
    end process;

        ap_block_state26_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state57_io_assign_proc : process(empty_60_reg_1665, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_state57_io <= (((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state57_pp2_stage0_iter29_assign_proc : process(empty_60_reg_1665, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_state57_pp2_stage0_iter29 <= (((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state58_io_assign_proc : process(empty_60_reg_1665, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_state58_io <= (((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state58_pp2_stage0_iter30_assign_proc : process(empty_60_reg_1665, pixels0_V_TREADY_int_regslice, pixels1_V_TREADY_int_regslice, pixels2_V_TREADY_int_regslice, pixels3_V_TREADY_int_regslice)
    begin
                ap_block_state58_pp2_stage0_iter30 <= (((empty_60_reg_1665 = ap_const_lv2_3) and (pixels3_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_2) and (pixels2_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_1) and (pixels1_V_TREADY_int_regslice = ap_const_logic_0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (pixels0_V_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(exitcond13_fu_606_p2)
    begin
        if ((exitcond13_fu_606_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state24_assign_proc : process(exitcond31914_fu_647_p2)
    begin
        if ((exitcond31914_fu_647_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state28_assign_proc : process(icmp_ln36_fu_667_p2)
    begin
        if ((icmp_ln36_fu_667_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, regslice_both_pixels0_V_U_apdone_blk, regslice_both_pixels1_V_U_apdone_blk, regslice_both_pixels2_V_U_apdone_blk, regslice_both_pixels3_V_U_apdone_blk, icmp_ln32_fu_485_p2)
    begin
        if ((not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln32_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter29, ap_enable_reg_pp2_iter30, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25, ap_enable_reg_pp2_iter26, ap_enable_reg_pp2_iter27, ap_enable_reg_pp2_iter28)
    begin
        if (((ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter30 = ap_const_logic_0) and (ap_enable_reg_pp2_iter29 = ap_const_logic_0) and (ap_enable_reg_pp2_iter28 = ap_const_logic_0) and (ap_enable_reg_pp2_iter27 = ap_const_logic_0) and (ap_enable_reg_pp2_iter26 = ap_const_logic_0) and (ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_index318_phi_fu_335_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond13_reg_1636, loop_index318_reg_331, empty_55_reg_1631)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_loop_index318_phi_fu_335_p4 <= empty_55_reg_1631;
        else 
            ap_phi_mux_loop_index318_phi_fu_335_p4 <= loop_index318_reg_331;
        end if; 
    end process;


    ap_phi_mux_loop_index_phi_fu_347_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond31914_reg_1656, loop_index_reg_343, empty_58_reg_1651)
    begin
        if (((exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_loop_index_phi_fu_347_p4 <= empty_58_reg_1651;
        else 
            ap_phi_mux_loop_index_phi_fu_347_p4 <= loop_index_reg_343;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_pixels0_V_U_apdone_blk, regslice_both_pixels1_V_U_apdone_blk, regslice_both_pixels2_V_U_apdone_blk, regslice_both_pixels3_V_U_apdone_blk, icmp_ln32_fu_485_p2)
    begin
        if ((not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (icmp_ln32_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    background_ARVALID_assign_proc : process(ap_CS_fsm_state6, background_ARREADY)
    begin
        if (((background_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            background_ARVALID <= ap_const_logic_1;
        else 
            background_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    background_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond13_reg_1636, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            background_RREADY <= ap_const_logic_1;
        else 
            background_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    background_blk_n_AR_assign_proc : process(m_axi_background_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            background_blk_n_AR <= m_axi_background_ARREADY;
        else 
            background_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    background_blk_n_R_assign_proc : process(m_axi_background_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond13_reg_1636)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond13_reg_1636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            background_blk_n_R <= m_axi_background_RVALID;
        else 
            background_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    bgLineBuff_address0_assign_proc : process(ap_block_pp0_stage0, ap_block_pp2_stage0, col_cast_reg_1678_pp2_iter14_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter15, loop_index318_cast_fu_612_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_1))) then 
            bgLineBuff_address0 <= col_cast_reg_1678_pp2_iter14_reg(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            bgLineBuff_address0 <= loop_index318_cast_fu_612_p1(8 - 1 downto 0);
        else 
            bgLineBuff_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bgLineBuff_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter15)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter15 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bgLineBuff_ce0 <= ap_const_logic_1;
        else 
            bgLineBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bgLineBuff_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond13_reg_1636_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond13_reg_1636_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bgLineBuff_we0 <= ap_const_logic_1;
        else 
            bgLineBuff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bgb_V_fu_737_p4 <= bgLineBuff_q0(15 downto 8);
    bgg_V_fu_727_p4 <= bgLineBuff_q0(23 downto 16);
    bgr_V_fu_717_p4 <= bgLineBuff_q0(31 downto 24);
    col_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_355),64));
    empty_55_fu_600_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index318_phi_fu_335_p4) + unsigned(ap_const_lv8_1));
    empty_58_fu_641_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index_phi_fu_347_p4) + unsigned(ap_const_lv8_1));
    empty_60_fu_658_p1 <= select_ln32_reg_1594(2 - 1 downto 0);
    empty_fu_479_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_463_p1) - unsigned(p_shl1_cast_fu_475_p1));
    exitcond13_fu_606_p2 <= "1" when (ap_phi_mux_loop_index318_phi_fu_335_p4 = ap_const_lv8_F0) else "0";
    exitcond31914_fu_647_p2 <= "1" when (ap_phi_mux_loop_index_phi_fu_347_p4 = ap_const_lv8_F0) else "0";
    exp_1_fu_848_p4 <= reg_1_fu_832_p1(62 downto 52);
    exp_2_fu_906_p4 <= reg_2_fu_890_p1(62 downto 52);
    exp_fu_790_p4 <= reg_fu_774_p1(62 downto 52);

    fgLineBuff_address0_assign_proc : process(ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, col_cast_fu_673_p1, ap_enable_reg_pp1_iter2, loop_index_cast_fu_653_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            fgLineBuff_address0 <= col_cast_fu_673_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            fgLineBuff_address0 <= loop_index_cast_fu_653_p1(8 - 1 downto 0);
        else 
            fgLineBuff_address0 <= "XXXXXXXX";
        end if; 
    end process;


    fgLineBuff_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            fgLineBuff_ce0 <= ap_const_logic_1;
        else 
            fgLineBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fgLineBuff_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond31914_reg_1656_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond31914_reg_1656_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fgLineBuff_we0 <= ap_const_logic_1;
        else 
            fgLineBuff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fga_V_fu_708_p1 <= fgLineBuff_q0(8 - 1 downto 0);

    foreground_ARVALID_assign_proc : process(ap_CS_fsm_state17, foreground_ARREADY)
    begin
        if (((foreground_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            foreground_ARVALID <= ap_const_logic_1;
        else 
            foreground_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    foreground_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond31914_reg_1656, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            foreground_RREADY <= ap_const_logic_1;
        else 
            foreground_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    foreground_blk_n_AR_assign_proc : process(m_axi_foreground_ARREADY, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            foreground_blk_n_AR <= m_axi_foreground_ARREADY;
        else 
            foreground_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    foreground_blk_n_R_assign_proc : process(m_axi_foreground_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond31914_reg_1656)
    begin
        if (((exitcond31914_reg_1656 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            foreground_blk_n_R <= m_axi_foreground_RVALID;
        else 
            foreground_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1567_ce_assign_proc : process(ap_CS_fsm_state2, regslice_both_pixels0_V_U_apdone_blk, regslice_both_pixels1_V_U_apdone_blk, regslice_both_pixels2_V_U_apdone_blk, regslice_both_pixels3_V_U_apdone_blk, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((regslice_both_pixels3_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels2_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels1_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_pixels0_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_1567_ce <= ap_const_logic_1;
        else 
            grp_fu_1567_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1567_p0 <= grp_fu_1567_p00(3 - 1 downto 0);
    grp_fu_1567_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_497_p3),19));
    grp_fu_1567_p1 <= ap_const_lv19_E100(17 - 1 downto 0);

    grp_fu_366_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_366_ce <= ap_const_logic_1;
        else 
            grp_fu_366_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_370_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_370_ce <= ap_const_logic_1;
        else 
            grp_fu_370_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_374_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_374_ce <= ap_const_logic_1;
        else 
            grp_fu_374_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_378_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_378_ce <= ap_const_logic_1;
        else 
            grp_fu_378_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_383_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_383_ce <= ap_const_logic_1;
        else 
            grp_fu_383_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_383_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fga_V_fu_708_p1),32));

    grp_fu_386_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_386_ce <= ap_const_logic_1;
        else 
            grp_fu_386_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_386_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fgr_V_reg_1688_pp2_iter16_reg),32));

    grp_fu_389_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_389_ce <= ap_const_logic_1;
        else 
            grp_fu_389_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_389_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fgg_V_reg_1693_pp2_iter16_reg),32));

    grp_fu_392_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_392_ce <= ap_const_logic_1;
        else 
            grp_fu_392_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_392_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fgb_V_reg_1698_pp2_iter16_reg),32));

    grp_fu_395_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_395_ce <= ap_const_logic_1;
        else 
            grp_fu_395_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_398_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_398_ce <= ap_const_logic_1;
        else 
            grp_fu_398_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_401_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_401_ce <= ap_const_logic_1;
        else 
            grp_fu_401_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_404_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_404_ce <= ap_const_logic_1;
        else 
            grp_fu_404_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_407_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_407_ce <= ap_const_logic_1;
        else 
            grp_fu_407_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_413_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_418_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_418_ce <= ap_const_logic_1;
        else 
            grp_fu_418_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_423_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_423_ce <= ap_const_logic_1;
        else 
            grp_fu_423_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_428_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_428_ce <= ap_const_logic_1;
        else 
            grp_fu_428_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_432_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_432_ce <= ap_const_logic_1;
        else 
            grp_fu_432_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_436_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_436_ce <= ap_const_logic_1;
        else 
            grp_fu_436_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_440_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_440_ce <= ap_const_logic_1;
        else 
            grp_fu_440_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_440_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bgr_V_fu_717_p4),32));

    grp_fu_443_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_443_ce <= ap_const_logic_1;
        else 
            grp_fu_443_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_443_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bgg_V_fu_727_p4),32));

    grp_fu_446_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            grp_fu_446_ce <= ap_const_logic_1;
        else 
            grp_fu_446_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_446_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bgb_V_fu_737_p4),32));
    icmp_ln323_1_fu_866_p2 <= "1" when (trunc_ln306_1_fu_836_p1 = ap_const_lv63_0) else "0";
    icmp_ln323_2_fu_924_p2 <= "1" when (trunc_ln306_2_fu_894_p1 = ap_const_lv63_0) else "0";
    icmp_ln323_fu_808_p2 <= "1" when (trunc_ln306_fu_778_p1 = ap_const_lv63_0) else "0";
    icmp_ln327_1_fu_878_p2 <= "1" when (exp_1_fu_848_p4 = ap_const_lv11_433) else "0";
    icmp_ln327_2_fu_936_p2 <= "1" when (exp_2_fu_906_p4 = ap_const_lv11_433) else "0";
    icmp_ln327_fu_820_p2 <= "1" when (exp_fu_790_p4 = ap_const_lv11_433) else "0";
    icmp_ln329_1_fu_884_p2 <= "1" when (signed(sh_amt_2_fu_872_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln329_2_fu_942_p2 <= "1" when (signed(sh_amt_4_fu_930_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln329_fu_826_p2 <= "1" when (signed(sh_amt_fu_814_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln32_fu_485_p2 <= "1" when (indvar_flatten_reg_298 = ap_const_lv10_3C0) else "0";
    icmp_ln330_1_fu_1136_p2 <= "1" when (signed(sh_amt_2_reg_1908) < signed(ap_const_lv12_36)) else "0";
    icmp_ln330_2_fu_1309_p2 <= "1" when (signed(sh_amt_4_reg_1950) < signed(ap_const_lv12_36)) else "0";
    icmp_ln330_fu_963_p2 <= "1" when (signed(sh_amt_reg_1866) < signed(ap_const_lv12_36)) else "0";
    icmp_ln337_1_fu_1160_p2 <= "1" when (signed(tmp_10_fu_1150_p4) < signed(ap_const_lv9_1)) else "0";
    icmp_ln337_2_fu_1333_p2 <= "1" when (signed(tmp_12_fu_1323_p4) < signed(ap_const_lv9_1)) else "0";
    icmp_ln337_fu_987_p2 <= "1" when (signed(tmp_8_fu_977_p4) < signed(ap_const_lv9_1)) else "0";
    icmp_ln33_fu_491_p2 <= "1" when (lcd_reg_320 = ap_const_lv3_4) else "0";
    icmp_ln36_fu_667_p2 <= "1" when (col_reg_355 = ap_const_lv8_F0) else "0";
    loop_index318_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index318_reg_331_pp0_iter1_reg),64));
    loop_index_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_343_pp1_iter1_reg),64));
    lshr_ln331_1_fu_1173_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_1_fu_1132_p1),to_integer(unsigned('0' & zext_ln331_1_fu_1169_p1(31-1 downto 0)))));
    lshr_ln331_2_fu_1346_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_2_fu_1305_p1),to_integer(unsigned('0' & zext_ln331_2_fu_1342_p1(31-1 downto 0)))));
    lshr_ln331_fu_1000_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_fu_959_p1),to_integer(unsigned('0' & zext_ln331_fu_996_p1(31-1 downto 0)))));
    or_ln327_1_fu_1192_p2 <= (icmp_ln327_1_reg_1915 or icmp_ln323_1_reg_1901);
    or_ln327_2_fu_1365_p2 <= (icmp_ln327_2_reg_1957 or icmp_ln323_2_reg_1943);
    or_ln327_fu_1019_p2 <= (icmp_ln327_reg_1873 or icmp_ln323_reg_1859);
    or_ln329_1_fu_1221_p2 <= (or_ln327_1_fu_1192_p2 or icmp_ln329_1_reg_1921);
    or_ln329_2_fu_1394_p2 <= (or_ln327_2_fu_1365_p2 or icmp_ln329_2_reg_1963);
    or_ln329_fu_1048_p2 <= (or_ln327_fu_1019_p2 or icmp_ln329_reg_1879);
    or_ln330_1_fu_1258_p2 <= (icmp_ln323_1_reg_1901 or and_ln330_3_fu_1252_p2);
    or_ln330_2_fu_1431_p2 <= (icmp_ln323_2_reg_1943 or and_ln330_5_fu_1425_p2);
    or_ln330_fu_1085_p2 <= (icmp_ln323_reg_1859 or and_ln330_1_fu_1079_p2);
    p_Result_1_fu_951_p3 <= (ap_const_lv1_1 & trunc_ln315_fu_948_p1);
    p_Result_3_fu_1124_p3 <= (ap_const_lv1_1 & trunc_ln315_1_fu_1121_p1);
    p_Result_5_fu_1297_p3 <= (ap_const_lv1_1 & trunc_ln315_2_fu_1294_p1);
    p_mid1_fu_535_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_519_p1) - unsigned(p_shl1_cast_mid1_fu_531_p1));
    p_shl1_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_467_p3),17));
    p_shl1_cast_mid1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_523_p3),17));
    p_shl1_fu_467_p3 <= (row_reg_309 & ap_const_lv4_0);
    p_shl1_mid1_fu_523_p3 <= (add_ln32_1_fu_505_p2 & ap_const_lv4_0);
    p_shl_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_455_p3),17));
    p_shl_cast_mid1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_511_p3),17));
    p_shl_fu_455_p3 <= (row_reg_309 & ap_const_lv8_0);
    p_shl_mid1_fu_511_p3 <= (add_ln32_1_fu_505_p2 & ap_const_lv8_0);
    pixel_V_fu_1548_p4 <= ((select_ln345_1_fu_1487_p3 & select_ln345_2_fu_1514_p3) & select_ln345_fu_1541_p3);

    pixels0_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp2_iter29, ap_block_pp2_stage0, empty_60_reg_1665, ap_enable_reg_pp2_iter30, pixels0_V_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (empty_60_reg_1665 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((empty_60_reg_1665 = ap_const_lv2_0) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            pixels0_V_TDATA_blk_n <= pixels0_V_TREADY_int_regslice;
        else 
            pixels0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pixels0_V_TVALID <= regslice_both_pixels0_V_U_vld_out;

    pixels0_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_block_pp2_stage0_11001)
    begin
        if (((empty_60_reg_1665 = ap_const_lv2_0) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            pixels0_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            pixels0_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    pixels1_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp2_iter29, ap_block_pp2_stage0, empty_60_reg_1665, ap_enable_reg_pp2_iter30, pixels1_V_TREADY_int_regslice)
    begin
        if ((((empty_60_reg_1665 = ap_const_lv2_1) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (empty_60_reg_1665 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            pixels1_V_TDATA_blk_n <= pixels1_V_TREADY_int_regslice;
        else 
            pixels1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pixels1_V_TVALID <= regslice_both_pixels1_V_U_vld_out;

    pixels1_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_block_pp2_stage0_11001)
    begin
        if (((empty_60_reg_1665 = ap_const_lv2_1) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            pixels1_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            pixels1_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    pixels2_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp2_iter29, ap_block_pp2_stage0, empty_60_reg_1665, ap_enable_reg_pp2_iter30, pixels2_V_TREADY_int_regslice)
    begin
        if ((((empty_60_reg_1665 = ap_const_lv2_2) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (empty_60_reg_1665 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            pixels2_V_TDATA_blk_n <= pixels2_V_TREADY_int_regslice;
        else 
            pixels2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pixels2_V_TVALID <= regslice_both_pixels2_V_U_vld_out;

    pixels2_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_block_pp2_stage0_11001)
    begin
        if (((empty_60_reg_1665 = ap_const_lv2_2) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            pixels2_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            pixels2_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    pixels3_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp2_iter29, ap_block_pp2_stage0, empty_60_reg_1665, ap_enable_reg_pp2_iter30, pixels3_V_TREADY_int_regslice)
    begin
        if ((((empty_60_reg_1665 = ap_const_lv2_3) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp2_iter30 = ap_const_logic_1) and (empty_60_reg_1665 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            pixels3_V_TDATA_blk_n <= pixels3_V_TREADY_int_regslice;
        else 
            pixels3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pixels3_V_TVALID <= regslice_both_pixels3_V_U_vld_out;

    pixels3_V_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp2_iter29, empty_60_reg_1665, ap_block_pp2_stage0_11001)
    begin
        if (((empty_60_reg_1665 = ap_const_lv2_3) and (ap_enable_reg_pp2_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            pixels3_V_TVALID_int_regslice <= ap_const_logic_1;
        else 
            pixels3_V_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    reg_1_fu_832_p1 <= grp_fu_418_p2;
    reg_2_fu_890_p1 <= grp_fu_423_p2;
    reg_fu_774_p1 <= grp_fu_413_p2;
    select_ln327_1_fu_1281_p3 <= 
        trunc_ln328_1_reg_1895 when (and_ln327_1_fu_1276_p2(0) = '1') else 
        select_ln330_3_fu_1263_p3;
    select_ln327_2_fu_1454_p3 <= 
        trunc_ln328_2_reg_1937 when (and_ln327_2_fu_1449_p2(0) = '1') else 
        select_ln330_5_fu_1436_p3;
    select_ln327_fu_1108_p3 <= 
        trunc_ln328_reg_1853 when (and_ln327_fu_1103_p2(0) = '1') else 
        select_ln330_1_fu_1090_p3;
    select_ln32_1_fu_541_p3 <= 
        p_mid1_fu_535_p2 when (icmp_ln33_fu_491_p2(0) = '1') else 
        empty_fu_479_p2;
    select_ln32_2_fu_549_p3 <= 
        add_ln32_1_fu_505_p2 when (icmp_ln33_fu_491_p2(0) = '1') else 
        row_reg_309;
    select_ln32_fu_497_p3 <= 
        ap_const_lv3_0 when (icmp_ln33_fu_491_p2(0) = '1') else 
        lcd_reg_320;
    select_ln330_1_fu_1090_p3 <= 
        ap_const_lv8_0 when (or_ln330_fu_1085_p2(0) = '1') else 
        select_ln337_fu_1065_p3;
    select_ln330_2_fu_1213_p3 <= 
        trunc_ln331_1_fu_1179_p1 when (and_ln330_2_fu_1207_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln330_3_fu_1263_p3 <= 
        ap_const_lv8_0 when (or_ln330_1_fu_1258_p2(0) = '1') else 
        select_ln337_1_fu_1238_p3;
    select_ln330_4_fu_1386_p3 <= 
        trunc_ln331_2_fu_1352_p1 when (and_ln330_4_fu_1380_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln330_5_fu_1436_p3 <= 
        ap_const_lv8_0 when (or_ln330_2_fu_1431_p2(0) = '1') else 
        select_ln337_2_fu_1411_p3;
    select_ln330_fu_1040_p3 <= 
        trunc_ln331_fu_1006_p1 when (and_ln330_fu_1034_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln337_1_fu_1238_p3 <= 
        shl_ln339_1_fu_1187_p2 when (and_ln337_1_fu_1232_p2(0) = '1') else 
        select_ln330_2_fu_1213_p3;
    select_ln337_2_fu_1411_p3 <= 
        shl_ln339_2_fu_1360_p2 when (and_ln337_2_fu_1405_p2(0) = '1') else 
        select_ln330_4_fu_1386_p3;
    select_ln337_fu_1065_p3 <= 
        shl_ln339_fu_1014_p2 when (and_ln337_fu_1059_p2(0) = '1') else 
        select_ln330_fu_1040_p3;
    select_ln345_1_fu_1487_p3 <= 
        tmp_fu_1467_p4 when (p_Result_s_reg_1848(0) = '1') else 
        tmp_1_fu_1477_p4;
    select_ln345_2_fu_1514_p3 <= 
        tmp_2_fu_1494_p4 when (p_Result_2_reg_1890(0) = '1') else 
        tmp_5_fu_1504_p4;
    select_ln345_fu_1541_p3 <= 
        tmp_3_fu_1521_p4 when (p_Result_4_reg_1932(0) = '1') else 
        tmp_4_fu_1531_p4;
        sext_ln326_1_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_fu_1141_p2),32));

    sext_ln326_1cast_fu_1183_p1 <= sext_ln326_1_fu_1146_p1(8 - 1 downto 0);
        sext_ln326_2_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_5_fu_1314_p2),32));

    sext_ln326_2cast_fu_1356_p1 <= sext_ln326_2_fu_1319_p1(8 - 1 downto 0);
        sext_ln326_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_fu_968_p2),32));

    sext_ln326cast_fu_1010_p1 <= sext_ln326_fu_973_p1(8 - 1 downto 0);
        sext_ln331_1_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_1908),32));

        sext_ln331_2_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_4_reg_1950),32));

        sext_ln331_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1866),32));

        sext_ln34_1_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_564_p3),64));

        sext_ln34_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_580_p4),64));

        sext_ln35_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_621_p4),64));

    sh_amt_1_fu_968_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_reg_1866));
    sh_amt_2_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_1_fu_858_p1));
    sh_amt_3_fu_1141_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_2_reg_1908));
    sh_amt_4_fu_930_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_2_fu_916_p1));
    sh_amt_5_fu_1314_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_4_reg_1950));
    sh_amt_fu_814_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_fu_800_p1));
    shl_ln339_1_fu_1187_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_1_reg_1895),to_integer(unsigned('0' & sext_ln326_1cast_fu_1183_p1(8-1 downto 0)))));
    shl_ln339_2_fu_1360_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_2_reg_1937),to_integer(unsigned('0' & sext_ln326_2cast_fu_1356_p1(8-1 downto 0)))));
    shl_ln339_fu_1014_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_reg_1853),to_integer(unsigned('0' & sext_ln326cast_fu_1010_p1(8-1 downto 0)))));
    sub_ln455_1_fu_1288_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln327_1_fu_1281_p3));
    sub_ln455_2_fu_1461_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln327_2_fu_1454_p3));
    sub_ln455_fu_1115_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln327_fu_1108_p3));
    tmp_10_fu_1150_p4 <= sh_amt_3_fu_1141_p2(11 downto 3);
    tmp_12_fu_1323_p4 <= sh_amt_5_fu_1314_p2(11 downto 3);
    tmp_1_fu_1477_p4 <= select_ln327_fu_1108_p3(7 downto 3);
    tmp_2_fu_1494_p4 <= sub_ln455_1_fu_1288_p2(7 downto 2);
    tmp_3_fu_1521_p4 <= sub_ln455_2_fu_1461_p2(7 downto 3);
    tmp_4_fu_1531_p4 <= select_ln327_2_fu_1454_p3(7 downto 3);
    tmp_5_fu_1504_p4 <= select_ln327_1_fu_1281_p3(7 downto 2);
    tmp_6_fu_564_p3 <= (grp_fu_1567_p3 & ap_const_lv2_0);
    tmp_8_fu_977_p4 <= sh_amt_1_fu_968_p2(11 downto 3);
    tmp_fu_1467_p4 <= sub_ln455_fu_1115_p2(7 downto 3);
    trunc_ln1_fu_580_p4 <= add_ln34_1_fu_575_p2(63 downto 2);
    trunc_ln2_fu_621_p4 <= add_ln34_2_fu_617_p2(63 downto 2);
    trunc_ln306_1_fu_836_p1 <= reg_1_fu_832_p1(63 - 1 downto 0);
    trunc_ln306_2_fu_894_p1 <= reg_2_fu_890_p1(63 - 1 downto 0);
    trunc_ln306_fu_778_p1 <= reg_fu_774_p1(63 - 1 downto 0);
    trunc_ln315_1_fu_1121_p1 <= reg_1_reg_1885(52 - 1 downto 0);
    trunc_ln315_2_fu_1294_p1 <= reg_2_reg_1927(52 - 1 downto 0);
    trunc_ln315_fu_948_p1 <= reg_reg_1843(52 - 1 downto 0);
    trunc_ln328_1_fu_862_p1 <= reg_1_fu_832_p1(8 - 1 downto 0);
    trunc_ln328_2_fu_920_p1 <= reg_2_fu_890_p1(8 - 1 downto 0);
    trunc_ln328_fu_804_p1 <= reg_fu_774_p1(8 - 1 downto 0);
    trunc_ln331_1_fu_1179_p1 <= lshr_ln331_1_fu_1173_p2(8 - 1 downto 0);
    trunc_ln331_2_fu_1352_p1 <= lshr_ln331_2_fu_1346_p2(8 - 1 downto 0);
    trunc_ln331_fu_1006_p1 <= lshr_ln331_fu_1000_p2(8 - 1 downto 0);
    xor_ln323_1_fu_1271_p2 <= (icmp_ln323_1_reg_1901 xor ap_const_lv1_1);
    xor_ln323_2_fu_1444_p2 <= (icmp_ln323_2_reg_1943 xor ap_const_lv1_1);
    xor_ln323_fu_1098_p2 <= (icmp_ln323_reg_1859 xor ap_const_lv1_1);
    xor_ln327_1_fu_1196_p2 <= (or_ln327_1_fu_1192_p2 xor ap_const_lv1_1);
    xor_ln327_2_fu_1369_p2 <= (or_ln327_2_fu_1365_p2 xor ap_const_lv1_1);
    xor_ln327_fu_1023_p2 <= (or_ln327_fu_1019_p2 xor ap_const_lv1_1);
    xor_ln329_1_fu_1226_p2 <= (or_ln329_1_fu_1221_p2 xor ap_const_lv1_1);
    xor_ln329_2_fu_1399_p2 <= (or_ln329_2_fu_1394_p2 xor ap_const_lv1_1);
    xor_ln329_fu_1053_p2 <= (or_ln329_fu_1048_p2 xor ap_const_lv1_1);
    xor_ln330_1_fu_1246_p2 <= (icmp_ln330_1_fu_1136_p2 xor ap_const_lv1_1);
    xor_ln330_2_fu_1419_p2 <= (icmp_ln330_2_fu_1309_p2 xor ap_const_lv1_1);
    xor_ln330_fu_1073_p2 <= (icmp_ln330_fu_963_p2 xor ap_const_lv1_1);
    zext_ln311_1_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_1_fu_848_p4),12));
    zext_ln311_2_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_2_fu_906_p4),12));
    zext_ln311_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_fu_790_p4),12));
    zext_ln320_1_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_1124_p3),54));
    zext_ln320_2_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_1297_p3),54));
    zext_ln320_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_951_p3),54));
    zext_ln331_1_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_1_fu_1166_p1),54));
    zext_ln331_2_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_2_fu_1339_p1),54));
    zext_ln331_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_fu_993_p1),54));
end behav;
